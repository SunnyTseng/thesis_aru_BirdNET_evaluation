library(RColorBrewer)
g1_plot <- function(data, species){
coul <- brewer.pal(10, "Set3")
g1 <- data %>%
pivot_longer(cols = c(TP_cum, FP_cum), names_to = "type") %>%
ggplot() +
geom_bar(aes(fill = type, y = value, x = category_dbl),
position = "stack",
stat = "identity") +
ggtitle(species) +
scale_fill_manual(values = coul[c(6, 1)],
labels = c("False Positive", "True Positive")) +
theme_bw() +
labs(x = "Confidence threshold",
y = "Remaining BirdNET detections (%)") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 11),
legend.position = c(0.80, 0.80),
title = element_text(size = 14))
return(g1)
}
g1_plot_1 <- function(data, species){
coul <- brewer.pal(10, "Set3")
threshold <- data %>%
filter(rate_cum > 0.90) %>%
slice_min(category_dbl) %>%
pull(category_dbl)
g1 <- data %>%
pivot_longer(cols = c(TP_cum, FP_cum), names_to = "type") %>%
ggplot() +
geom_bar(aes(fill = type, y = value, x = category_dbl),
position = "stack",
stat = "identity") +
#geom_point(aes(y = rate_cum*100, x = category_dbl)) +
#geom_line(aes(y = rate_cum*100, x = category_dbl)) +
geom_segment(x = threshold, y = 30, xend = threshold, yend = 10,
colour = "red", linewidth = 1.2, size = 1,
arrow = arrow(length = unit(0.1, "inches"))) +
geom_segment(x = 0.725, y = 30, xend = 0.725, yend = 10,
colour = "slateblue4", linewidth = 1.2, size = 1,
arrow = arrow(length = unit(0.1, "inches"))) +
# geom_vline(xintercept = threshold, colour = "red", linetype = "dashed", linewidth = 1.2) +
# geom_vline(xintercept = 0.75, colour = "grey", linetype = "dashed", linewidth = 1.2) +
ggtitle(species) +
scale_fill_manual(values = coul[c(6, 1)],
labels = c("False Positive", "True Positive")) +
theme_bw() +
labs(x = "Confidence threshold",
y = "Remaining BirdNET detections (%)") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 11),
legend.position = c(0.80, 0.80),
title = element_text(size = 14))
return(g1)
}
# Import data -------------------------------------------------------------
data_validation <- list.files(here("data"), pattern = "*finished.csv") %>%
map_df(~ read_csv(paste0("./data/", .)))
data_2020 <- read_csv(here("data", "processed", "2020_passerine_BirdNET_updated.csv"))
data_2021 <- read_csv(here("data", "processed", "2021_passerine_BirdNET.csv"))
data_all <- bind_rows(data_2020, data_2021) %>%
mutate(category = cut(x = confidence, breaks = seq(0.1, 1, 0.05)))
rate <- data_validation %>%
group_nest(common_name, scientific_name, category) %>%
mutate(rate = map_dbl(.x = data, .f =~ sum(.x$observed == "Y")/nrow(.x))) %>%
separate(col = category, into = c("from", "to"), sep = ",") %>%
mutate(from = str_extract(from, pattern = "[^\\(]+") %>% as.numeric(),
to = str_extract(to, pattern = "[^\\]]+") %>% as.numeric()) %>%
mutate(category_dbl = (from + to)/2) %>%
select(-data)
coul <- brewer.pal(12, "Paired")
coul <- colorRampPalette(coul)(19)
g <- ggplot(rate, aes(x = category_dbl,
y = rate,
group = common_name,
colour = common_name)) +
geom_point(size = 3,
alpha = 0.2) +
geom_line(stat = "smooth",
method = "loess", # span is 0.75 by default
se = FALSE,
linewidth = 1.5,
alpha = 0.7) +
scale_colour_manual(values = coul) +
scale_x_continuous(limits = c(0.1, 1), expand = c(0, 0)) +
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
labs(x = "BirdNET confidence",
y = "True positive rate",
colour = "Species") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
plot.margin = margin(1, 1, 1, 1, "cm")) +
guides(colour = guide_legend(ncol = 4))
g
g <- ggplot(rate, aes(x = category_dbl,
y = rate,
group = common_name,
colour = common_name)) +
geom_point(size = 3,
alpha = 0.2) +
geom_line(stat = "smooth",
method = "loess", # span is 0.75 by default
se = FALSE,
linewidth = 1.5,
alpha = 0.7) +
scale_colour_manual(values = coul) +
scale_x_continuous(limits = c(0.1, 1), expand = c(0, 0), breaks = seq(0.1, 1, by = 0.3)) +
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
labs(x = "BirdNET confidence",
y = "True positive rate",
colour = "Species") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
plot.margin = margin(1, 1, 1, 1, "cm")) +
guides(colour = guide_legend(ncol = 4))
f
g
ggsave(plot = g,
filename = here("docs", "figures", "calibration_curves.PNG"),
width = 28,
height = 20,
units = "cm",
dpi = 300)
rm(list = ls())
library(tidyverse)
library(here)
library(tidyverse)
library(data.table)
library(here)
library(spatstat.utils)
library(patchwork)
library(grid)
library(RColorBrewer)
g1_plot <- function(data, species){
coul <- brewer.pal(10, "Set3")
g1 <- data %>%
pivot_longer(cols = c(TP_cum, FP_cum), names_to = "type") %>%
ggplot() +
geom_bar(aes(fill = type, y = value, x = category_dbl),
position = "stack",
stat = "identity") +
ggtitle(species) +
scale_fill_manual(values = coul[c(6, 1)],
labels = c("False Positive", "True Positive")) +
theme_bw() +
labs(x = "Confidence threshold",
y = "Remaining BirdNET detections (%)") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 11),
legend.position = c(0.80, 0.80),
title = element_text(size = 14))
return(g1)
}
g1_plot_1 <- function(data, species){
coul <- brewer.pal(10, "Set3")
threshold <- data %>%
filter(rate_cum > 0.90) %>%
slice_min(category_dbl) %>%
pull(category_dbl)
g1 <- data %>%
pivot_longer(cols = c(TP_cum, FP_cum), names_to = "type") %>%
ggplot() +
geom_bar(aes(fill = type, y = value, x = category_dbl),
position = "stack",
stat = "identity") +
#geom_point(aes(y = rate_cum*100, x = category_dbl)) +
#geom_line(aes(y = rate_cum*100, x = category_dbl)) +
geom_segment(x = threshold, y = 30, xend = threshold, yend = 10,
colour = "red", linewidth = 1.2, size = 1,
arrow = arrow(length = unit(0.1, "inches"))) +
geom_segment(x = 0.725, y = 30, xend = 0.725, yend = 10,
colour = "slateblue4", linewidth = 1.2, size = 1,
arrow = arrow(length = unit(0.1, "inches"))) +
# geom_vline(xintercept = threshold, colour = "red", linetype = "dashed", linewidth = 1.2) +
# geom_vline(xintercept = 0.75, colour = "grey", linetype = "dashed", linewidth = 1.2) +
ggtitle(species) +
scale_fill_manual(values = coul[c(6, 1)],
labels = c("False Positive", "True Positive")) +
theme_bw() +
labs(x = "Confidence threshold",
y = "Remaining BirdNET detections (%)") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 11),
legend.position = c(0.80, 0.80),
title = element_text(size = 14))
return(g1)
}
data_validation <- list.files(here("data"), pattern = "*finished.csv") %>%
map_df(~ read_csv(paste0("./data/", .)))
data_2020 <- read_csv(here("data", "processed", "2020_passerine_BirdNET_updated.csv"))
data_2021 <- read_csv(here("data", "processed", "2021_passerine_BirdNET.csv"))
data_all <- bind_rows(data_2020, data_2021) %>%
mutate(category = cut(x = confidence, breaks = seq(0.1, 1, 0.05)))
rate <- data_validation %>%
group_nest(common_name, scientific_name, category) %>%
mutate(rate = map_dbl(.x = data, .f =~ sum(.x$observed == "Y")/nrow(.x))) %>%
separate(col = category, into = c("from", "to"), sep = ",") %>%
mutate(from = str_extract(from, pattern = "[^\\(]+") %>% as.numeric(),
to = str_extract(to, pattern = "[^\\]]+") %>% as.numeric()) %>%
mutate(category_dbl = (from + to)/2) %>%
select(-data)
rate_loess <- rate %>%
group_nest(common_name) %>%
mutate(rate_loess = map(.x = data, .f =~ loess(rate ~ category_dbl, data = .x) %>%
predict() %>%
ifelse(. > 1, 1, .))) %>%
unnest(cols = c(data, rate_loess)) %>%
select(common_name, scientific_name, category_dbl, rate_loess)
rate_loess_count <- data_all %>%
count(common_name, scientific_name, category) %>%
separate(col = category, into = c("from", "to"), sep = ",") %>%
mutate(from = str_extract(from, pattern = "[^\\(]+") %>% as.numeric(),
to = str_extract(to, pattern = "[^\\]]+") %>% as.numeric()) %>%
mutate(category_dbl = (from + to)/2) %>%
left_join(rate_loess) %>%
drop_na(rate_loess) %>% # to keep only target species
mutate(TP = n * rate_loess,
FP = n * (1 - rate_loess)) %>%
group_by(common_name) %>%
mutate(TP_cum = revcumsum(TP)/sum(n)*100, # total number of true positives after applying threshold
FP_cum = revcumsum(FP)/sum(n)*100, # total number of false positives after applying threshold
rate_cum = TP_cum/(TP_cum + FP_cum))
save(rate_loess_count, file = here("R", "rate_loess_count.rda"))
load("G:/PhD thesis/Ch1_BirdNET/R/thresholds_table_s2.rda")
View(thresholds_table_s2)
# universal threshold of 0.7 ---------------------------------------------
thresholds_table_s1 <- rate_loess_count %>%
filter(from == 0.7) %>%
mutate(proportion_detection = TP_cum + FP_cum) %>%
select(common_name, scientific_name, from, rate_cum, proportion_detection) %>%
mutate(proportion_detection = round(proportion_detection, digits = 0),
rate_cum = round(rate_cum, digits = 2)) %>%
arrange(from, desc(rate_cum), proportion_detection)
thresholds_table_s3 <- rate_loess_count %>%
filter(rate_cum > 0.90) %>%
group_by(common_name, scientific_name) %>%
slice_min(category_dbl) %>%
mutate(proportion_detection = TP_cum + FP_cum) %>%
select(common_name, scientific_name, from, rate_cum, proportion_detection) %>%
mutate(proportion_detection = round(proportion_detection, digits = 0),
rate_cum = round(rate_cum, digits = 2)) %>%
arrange(from, rate_cum, proportion_detection)
View(thresholds_table_s3)
rm(list = ls())
library(tidyverse)
library(here)
load(here("R", "rate_loess_count.rda"))
# universal threshold of 0.7 ---------------------------------------------
thresholds_table_s1 <- rate_loess_count %>%
filter(from == 0.7) %>%
mutate(proportion_detection = TP_cum + FP_cum) %>%
select(common_name, scientific_name, from, rate_cum, proportion_detection) %>%
mutate(proportion_detection = round(proportion_detection, digits = 0),
rate_cum = round(rate_cum, digits = 2)) %>%
arrange(from, desc(rate_cum), proportion_detection)
thresholds_table_s2 <- rate_loess_count %>%
filter(rate_cum > 0.90) %>%
group_by(common_name, scientific_name) %>%
slice_min(category_dbl) %>%
mutate(proportion_detection = TP_cum + FP_cum) %>%
select(common_name, scientific_name, from, rate_cum, proportion_detection) %>%
mutate(proportion_detection = round(proportion_detection, digits = 0),
rate_cum = round(rate_cum, digits = 2)) %>%
arrange(from, rate_cum, proportion_detection)
load("G:/PhD thesis/Ch1_BirdNET/R/aci_values_target.rda")
View(aci_values_target)
View(aci_values_target)
rm(list = ls())
# library -----------------------------------------------------------------
library(tidyverse)
library(here)
# load data ---------------------------------------------------------------
load(here("R", "rate_loess_count.rda"))
# universal threshold of 0.7 ---------------------------------------------
thresholds_table_s1 <- rate_loess_count %>%
filter(from == 0.7) %>%
mutate(proportion_detection = TP_cum + FP_cum) %>%
select(common_name, scientific_name, from, rate_cum, proportion_detection) %>%
mutate(proportion_detection = round(proportion_detection, digits = 0),
rate_cum = round(rate_cum, digits = 2)) %>%
arrange(from, desc(rate_cum), proportion_detection)
# species-specific threshld achieving 0.9 precision ----------------------
thresholds_table_s2 <- rate_loess_count %>%
filter(rate_cum > 0.90) %>%
group_by(common_name, scientific_name) %>%
slice_min(category_dbl) %>%
mutate(proportion_detection = TP_cum + FP_cum) %>%
select(common_name, scientific_name, from, rate_cum, proportion_detection) %>%
mutate(proportion_detection = round(proportion_detection, digits = 0),
rate_cum = round(rate_cum, digits = 2)) %>%
arrange(from, rate_cum, proportion_detection)
thresholds_table <- thresholds_table_s1 %>%
left_join(thresholds_table_s2, by = "common_name", suffix = c("_s1", "_s2")) %>%
# write_csv(thresholds_table_s2,
#           file = here("docs", "tables", "thresholds_table_s2.csv"))
# threshold tables visualization ------------------------------------------
light_coul <- brewer.pal(n = 3, "Pastel2")
thresholds_table <- thresholds_table_s1 %>%
left_join(thresholds_table_s2, by = "common_name", suffix = c("_s1", "_s2"))
View(thresholds_table)
thresholds_table <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_s1", "_s2"))
View(thresholds_table)
thresholds_table <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_s1", "_s2")) %>%
gt() %>%
tab_spanner(label = "Universal",
columns = c(from, rate_cum, proportion_detection)) %>%
tab_spanner(label = "Species-specific",
columns = c(from_s2, rate_cum_s2, proportion_detection_s2))
library(gt)
thresholds_table <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_s1", "_s2")) %>%
gt() %>%
tab_spanner(label = "Universal",
columns = c(from, rate_cum, proportion_detection)) %>%
tab_spanner(label = "Species-specific",
columns = c(from_s2, rate_cum_s2, proportion_detection_s2))
thresholds_table <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_s1", "_s2")) %>%
gt() %>%
tab_spanner(label = "Universal",
columns = c(from_s1, rate_cum_s1, proportion_detection_s1)) %>%
tab_spanner(label = "Species-specific",
columns = c(from_s2, rate_cum_s2, proportion_detection_s2))
threshold_table
table_final
table_final <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_s1", "_s2")) %>%
gt() %>%
tab_spanner(label = "Universal",
columns = c(from_s1, rate_cum_s1, proportion_detection_s1)) %>%
tab_spanner(label = "Species-specific",
columns = c(from_s2, rate_cum_s2, proportion_detection_s2))
table_final
table_final <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_s1", "_s2"))
table_final
table_final <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_s1", "_s2"))
table_final
table_final <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_s1", "_s2")) %>%
gt() %>%
tab_spanner(label = "Universal",
columns = c(from_s1, rate_cum_s1, proportion_detection_s1)) %>%
tab_spanner(label = "Species-specific",
columns = c(from_s2, rate_cum_s2, proportion_detection_s2))
table_final
table_final
table_final <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_s1", "_s2")) %>%
ungroup() %>%
gt() %>%
tab_spanner(label = "Universal",
columns = c(from_s1, rate_cum_s1, proportion_detection_s1)) %>%
tab_spanner(label = "Species-specific",
columns = c(from_s2, rate_cum_s2, proportion_detection_s2))
table_final
table_final <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_s1", "_s2"))
View(table_final)
# species-specific threshld achieving 0.9 precision ----------------------
thresholds_table_s2 <- rate_loess_count %>%
filter(rate_cum > 0.90) %>%
group_by(common_name, scientific_name) %>%
slice_min(category_dbl) %>%
mutate(proportion_detection = TP_cum + FP_cum) %>%
select(common_name, scientific_name, from, rate_cum, proportion_detection) %>%
mutate(proportion_detection = round(proportion_detection, digits = 0),
rate_cum = round(rate_cum, digits = 2)) %>%
rename(from = "Threshold",
rate_cum = "Detections retained (%)",
proportion_detection = "Precision")
# species-specific threshld achieving 0.9 precision ----------------------
thresholds_table_s2 <- rate_loess_count %>%
filter(rate_cum > 0.90) %>%
group_by(common_name, scientific_name) %>%
slice_min(category_dbl) %>%
mutate(proportion_detection = TP_cum + FP_cum) %>%
select(common_name, scientific_name, from, rate_cum, proportion_detection) %>%
mutate(proportion_detection = round(proportion_detection, digits = 0),
rate_cum = round(rate_cum, digits = 2)) %>%
rename("Threshold" = from,
"Detections retained (%)" = rate_cum,
"Precision" = proportion_detection)
thresholds_table_s2
# universal threshold of 0.7 ---------------------------------------------
thresholds_table_s1 <- rate_loess_count %>%
filter(from == 0.7) %>%
mutate(proportion_detection = TP_cum + FP_cum) %>%
select(common_name, scientific_name, from, rate_cum, proportion_detection) %>%
mutate(proportion_detection = round(proportion_detection, digits = 0),
rate_cum = round(rate_cum, digits = 2)) %>%
arrange(from, desc(rate_cum), proportion_detection) %>%
rename("Threshold" = from,
"Detections retained (%)" = rate_cum,
"Precision" = proportion_detection)
# species-specific threshld achieving 0.9 precision ----------------------
thresholds_table_s2 <- rate_loess_count %>%
filter(rate_cum > 0.90) %>%
group_by(common_name, scientific_name) %>%
slice_min(category_dbl) %>%
mutate(proportion_detection = TP_cum + FP_cum) %>%
select(common_name, scientific_name, from, rate_cum, proportion_detection) %>%
mutate(proportion_detection = round(proportion_detection, digits = 0),
rate_cum = round(rate_cum, digits = 2)) %>%
rename("Threshold" = from,
"Detections retained (%)" = rate_cum,
"Precision" = proportion_detection)
table_final <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_u", "_s"))
table_final
ungroup() %>%
gt() %>%
tab_spanner(label = "Universal",
columns = c(from_s1, rate_cum_s1, proportion_detection_s1)) %>%
tab_spanner(label = "Species-specific",
columns = c(from_s2, rate_cum_s2, proportion_detection_s2))
table_final <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_u", "_s")) %>%
ungroup() %>%
gt() %>%
tab_spanner(label = "Universal",
columns = c(from_s1, rate_cum_s1, proportion_detection_s1)) %>%
tab_spanner(label = "Species-specific",
columns = c(from_s2, rate_cum_s2, proportion_detection_s2))
# universal threshold of 0.7 ---------------------------------------------
thresholds_table_s1 <- rate_loess_count %>%
filter(from == 0.7) %>%
mutate(proportion_detection = TP_cum + FP_cum) %>%
select(common_name, scientific_name, from, rate_cum, proportion_detection) %>%
mutate(proportion_detection = round(proportion_detection, digits = 0),
rate_cum = round(rate_cum, digits = 2)) %>%
arrange(from, desc(rate_cum), proportion_detection)
# species-specific threshld achieving 0.9 precision ----------------------
thresholds_table_s2 <- rate_loess_count %>%
filter(rate_cum > 0.90) %>%
group_by(common_name, scientific_name) %>%
slice_min(category_dbl) %>%
mutate(proportion_detection = TP_cum + FP_cum) %>%
select(common_name, scientific_name, from, rate_cum, proportion_detection) %>%
mutate(proportion_detection = round(proportion_detection, digits = 0),
rate_cum = round(rate_cum, digits = 2))
table_final <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_u", "_s")) %>%
ungroup() %>%
gt() %>%
tab_spanner(label = "Universal",
columns = c(from_s1, rate_cum_s1, proportion_detection_s1)) %>%
tab_spanner(label = "Species-specific",
columns = c(from_s2, rate_cum_s2, proportion_detection_s2))
table_final <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_u", "_s")) %>%
ungroup() %>%
gt() %>%
tab_spanner(label = "Universal",
columns = c(from_u, rate_cum_u, proportion_detection_u)) %>%
tab_spanner(label = "Species-specific",
columns = c(from_s, rate_cum_s, proportion_detection_s))
table_final
gtsave(table_final, filename = here("docs", "tables", "thresholds_table.docx")
gtsave(table_final, filename = here("docs", "tables", "thresholds_table.docx"))
gtsave(table_final, filename = here("docs", "tables", "thresholds_table.docx"))
