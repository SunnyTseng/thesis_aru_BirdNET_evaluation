bird_data_after
bird_data_after$site
bird_data_after$site %>% unique()
rm(list = ls())
# library -----------------------------------------------------------------
library(tidyverse)
library(here)
library(gt)
library(RColorBrewer)
# load data ---------------------------------------------------------------
load(here("R", "rate_loess_count.rda"))
load(here("R", "rate_logistic_count.rda"))
data_2020 <- read_csv(here("data", "processed", "2020_passerine_BirdNET_updated.csv"))
data_2021 <- read_csv(here("data", "processed", "2021_passerine_BirdNET.csv"))
data_all <- bind_rows(data_2020, data_2021) %>%
mutate(category = cut(x = confidence, breaks = seq(0.1, 1, 0.05))) %>%
filter(common_name %in% rate_logistic_count$common_name)
load(here("R", "rate_logistic_count.rda"))
# load data ---------------------------------------------------------------
load(here("R", "rda_files", "rate_loess_count.rda"))
load(here("R", "rda_files", "rate_logistic_count.rda"))
# universal threshold of 0.7 ---------------------------------------------
thresholds_table_s1 <- rate_logistic_count %>%
filter(from == 0.7) %>%
mutate(proportion_detection = TP_cum + FP_cum) %>%
select(common_name, scientific_name, from, rate_cum, proportion_detection) %>%
mutate(proportion_detection = round(proportion_detection, digits = 0),
rate_cum = round(rate_cum, digits = 2)) %>%
arrange(from, desc(rate_cum), proportion_detection)
# species-specific threshld achieving 0.9 precision ----------------------
thresholds_table_out <- rate_logistic_count %>%
filter(common_name %in% c("Brown Creeper", "Varied Thrush")) %>%
group_by(common_name, scientific_name) %>%
slice_max(category_dbl) %>%
mutate(proportion_detection = TP_cum + FP_cum) %>%
select(common_name, scientific_name, from, rate_cum, proportion_detection) %>%
mutate(proportion_detection = round(proportion_detection, digits = 0),
rate_cum = round(rate_cum, digits = 2))
thresholds_table_s2 <- rate_logistic_count %>%
filter(rate_cum > 0.90) %>%
group_by(common_name, scientific_name) %>%
slice_min(category_dbl) %>%
mutate(proportion_detection = TP_cum + FP_cum) %>%
select(common_name, scientific_name, from, rate_cum, proportion_detection) %>%
mutate(proportion_detection = round(proportion_detection, digits = 0),
rate_cum = round(rate_cum, digits = 2)) %>%
rbind(thresholds_table_out)
thresholds_table_s1
thresholds_table_s2
rate_logistic_count
data_validation <- list.files(here("data"), pattern = "*finished.csv") %>%
map_df(~ read_csv(paste0("./data/", .)))
# species-specific threshld achieving 0.9 precision ----------------------
logistic_models <- data_validation %>%
mutate(observed = ifelse(observed == "Y", 1, 0))
logistic_models
logistic_models <- data_validation %>%
mutate(observed = ifelse(observed == "Y", 1, 0))
group_nest(common_name, scientific_name)
# species-specific threshld achieving 0.9 precision ----------------------
logistic_models <- data_validation %>%
mutate(observed = ifelse(observed == "Y", 1, 0)) %>%
group_nest(common_name, scientific_name) %>%
mutate(model = map(.x = data, .f =~ glm(observed ~ confidence, data = .x, family = binomial))) %>%
select(common_name, scientific_name, model)
logistic_models
# find precision given a threshold
threshold2precision <- function(probability_data, threshold){
threshold <- probability_data %>%
filter(confidence > threshold) %>%
pull(probability) %>%
mean()
}
# find the data ramained given a threshold
threshold2remain <- function(probability_data, threshold){
remain <- probability_data %>%
filter(confidence > threshold) %>%
nrow()
remain/nrow(probability_data)
}
all_probability <- data_all %>%
group_nest(common_name, scientific_name) %>%
mutate(data = map(.x = data,
.f =~ .x %>%
mutate(probability = predict(logistic_models$model[[1]],
newdata = .x,
type = "response"))))
data_all <- bind_rows(data_2020, data_2021) %>%
mutate(category = cut(x = confidence, breaks = seq(0.1, 1, 0.05))) %>%
filter(common_name %in% rate_logistic_count$common_name)
all_probability <- data_all %>%
group_nest(common_name, scientific_name) %>%
mutate(data = map(.x = data,
.f =~ .x %>%
mutate(probability = predict(logistic_models$model[[1]],
newdata = .x,
type = "response"))))
all_probability$data[[1]]
all_probability$data[[1]]$probability
all_probability$data[[3]]$probability
logistic_models
all_probability <- data_all %>%
group_nest(common_name, scientific_name) %>%
left_join(logistic_models)
all_probability
all_probability <- data_all %>%
group_nest(common_name, scientific_name) %>%
left_join(logistic_models) %>%
mutate(data = map2(.x = data, .y = model,
.f =~ .x %>%
mutate(probability = predict(.y,
newdata = .x,
type = "response"))))
all_probability$data[[1]]
all_probability$data[[5]]
select(threshold, data_remained, precision)))
all_threshold_table <- all_probability %>%
mutate(threshold_table = map(.x = data, .f =~ tibble(threshold = seq(0, 1, 0.001)) %>%
mutate(data_remained = map_dbl(.x = threshold,
.f =~ threshold2remain(.x, .x$probability)) %>%
mutate(precision = map_dbl(.x = threshold,
.f =~ threshold2precision(.x, .x$probability))) %>%
select(threshold, data_remained, precision))))
data_all$confidence
data_all$confidence %>% str()
all_probability
.f =~ threshold2precision(.x, .x$probability)))
all_threshold_table <- all_probability %>%
mutate(threshold_table = map(.x = data, .f =~ tibble(threshold = seq(0, 1, 0.001)) %>%
mutate(data_remained = map_dbl(.x = threshold,
.f =~ threshold2remain(.x, .x$probability))) %>%
mutate(precision = map_dbl(.x = threshold,
.f =~ threshold2precision(.x, .x$probability)))))
all_threshold_table <- all_probability %>%
mutate(threshold_table = map(.x = data, .f =~ tibble(threshold = seq(0, 1, 0.001)) %>%
mutate(data_remained = map_dbl(.x = threshold,
.f =~ threshold2remain(.x, .x$probability))) ))
all_threshold_table <- all_probability %>%
mutate(threshold_table = map(.x = data, .f =~ tibble(threshold = seq(0, 1, 0.001)) ))
all_threshold_table
all_probability <- data_all %>%
group_nest(common_name, scientific_name) %>%
left_join(logistic_models) %>%
mutate(probability = map2(.x = data, .y = model,
.f =~ .x %>%
mutate(probability = predict(.y,
newdata = .x,
type = "response"))))
all_threshold_table <- all_probability %>%
mutate(threshold_table = map(.x = data, .f =~ tibble(threshold = seq(0, 1, 0.001))
)
)
all_threshold_table
all_threshold_table <- all_probability %>%
mutate(threshold_table = map(.x = probability,
.f =~ tibble(threshold = seq(0, 1, 0.001)) %>%
mutate(data_remained = map_dbl(.x = threshold,
.f =~ threshold2remain(.x, .x)))))
knitr::opts_chunk$set(echo = TRUE)
# set up the library
library(tidyverse)
# edit the path as needed
NOFL_validation_finished <- read_csv("Northern_Flicker_finished.csv")
# fit logistic model using glm()
NOFL_model <- glm(observed ~ confidence,
data = NOFL_validation_finished,
family = binomial)
knitr::opts_chunk$set(echo = TRUE)
# set up the library
library(tidyverse)
# edit the path as needed
NOFL_validation_finished <- read_csv("Northern_Flicker_finished.csv")
# fit logistic model using glm()
NOFL_model <- glm(observed ~ confidence,
data = NOFL_validation_finished,
family = binomial)
rm(list = ls())
# read in the output from BirdNET
birdnet_output <- read_csv("birdnet_full.csv")
# select the target species and create a validation dataset
NOFL_validation <- birdnet_output %>%
filter(common_name == "Northern Flicker") %>%
mutate(class = cut(x = confidence, breaks = seq(0.1, 1, 0.05))) %>%
slice_sample(n = 10, by = class)
knitr::opts_chunk$set(echo = TRUE)
# set up the library
library(tidyverse)
# read in the output from BirdNET
birdnet_output <- read_csv("birdnet_full.csv")
# select the target species and create a validation dataset
NOFL_validation <- birdnet_output %>%
filter(common_name == "Northern Flicker") %>%
mutate(class = cut(x = confidence, breaks = seq(0.1, 1, 0.05))) %>%
slice_sample(n = 10, by = class)
# use install.packages("PACKAGE_NAME") if you don't have the following required packages installed yet
library(shiny)
library(bslib)
library(shinyWidgets)
library(shinyFiles)
library(tidyverse)
library(DT)
library(praise)
library(tuneR)
library(seewave)
shiny::runGitHub("Birds-Canada-ARU-2024", "SunnyTseng", subdir = "R")
# edit the path as needed
NOFL_validation_finished <- read_csv("Northern_Flicker_finished.csv")
# fit logistic model using glm()
NOFL_model <- glm(observed ~ confidence,
data = NOFL_validation_finished,
family = binomial)
test <- NOFL_validation %>%
mutate(observed = if_else(observed == "Y", 1, 0))
# edit the path as needed
NOFL_validation_finished <- read_csv("Northern_Flicker_finished.csv")
NOFL_validation_finished
test <- NOFL_validation_finished %>%
mutate(observed = if_else(observed == "Y", 1, 0))
write_csv(test, here("R", "Ch1_10_step_by_step_tutorial", "Northern_Flicker_finished.csv"))
# edit the path as needed
NOFL_validation_finished <- read_csv("Northern_Flicker_finished.csv")
# fit logistic model using glm()
NOFL_model <- glm(observed ~ confidence,
data = NOFL_validation_finished,
family = binomial)
ggplot(NOFL_validation_finished, aes(x = confidence,
y = observed)) +
geom_point(size = 5,
alpha = 0.1) +
geom_line(stat = "smooth",
method = "glm",
se = FALSE,
method.args = list(family = binomial),
linewidth = 1.5) +
scale_x_continuous(limits = c(0.1, 1), expand = c(0, 0), breaks = seq(0.1, 1, by = 0.3)) +
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
labs(x = "BirdNET confidence",
y = "True positive rate")
# find precision given a threshold
threshold2precision <- function(probability_data, threshold){
threshold <- probability_data %>%
filter(confidence > threshold) %>%
pull(probability) %>%
mean()
}
# find the data ramained given a threshold
threshold2remain <- function(probability_data, threshold){
remain <- probability_data %>%
filter(confidence > threshold) %>%
nrow()
remain/nrow(probability_data)
}
# read the full BirdNET output file
birdnet_output <- read_csv("birdnet_full.csv")
# predict probabilities for Northern Flicker data
NOFL_probability <- birdnet_output %>%
filter(common_name == "Northern Flicker") %>%
mutate(probability = predict(NOFL_model, newdata = ., type = "response"))
# create a table of thresholds with precision and data retention
threshold_table <- tibble(threshold = seq(0, 1, 0.001)) %>%
mutate(data_remained = map_dbl(.x = threshold,
.f =~ threshold2remain(NOFL_probability, .x))) %>%
mutate(precision = map_dbl(.x = threshold,
.f =~ threshold2precision(NOFL_probability, .x)))
threshold_table <- tibble(threshold = seq(0, 1, 0.001)) %>%
mutate(data_remained = threshold2remain(NOFL_probability, threshold))
threshold_table <- tibble(threshold = seq(0, 1, 0.001)) %>%
mutate(data_remained = threshold2remain(NOFL_probability, threshold))
all_threshold_table <- all_probability %>%
mutate(threshold_table = map(
.x = probability,
.f = ~ tibble(threshold = seq(0, 1, 0.001)) %>%
mutate(data_remained = map_dbl(
.x = threshold,
.f = ~ threshold2remain(.x, .y = .x) # Adjust as needed to pass the correct arguments
))
))
all_probability <- data_all %>%
group_nest(common_name, scientific_name) %>%
left_join(logistic_models) %>%
mutate(probability = map2(.x = data, .y = model,
.f =~ .x %>%
mutate(probability = predict(.y,
newdata = .x,
type = "response"))))
# library -----------------------------------------------------------------
library(tidyverse)
# library -----------------------------------------------------------------
library(tidyverse)
library(here)
library(gt)
library(RColorBrewer)
# find precision given a threshold
threshold2precision <- function(probability_data, threshold){
threshold <- probability_data %>%
filter(confidence > threshold) %>%
pull(probability) %>%
mean()
}
# find the data ramained given a threshold
threshold2remain <- function(probability_data, threshold){
remain <- probability_data %>%
filter(confidence > threshold) %>%
nrow()
remain/nrow(probability_data)
}
# load data ---------------------------------------------------------------
load(here("R", "rda_files", "rate_loess_count.rda"))
load(here("R", "rda_files", "rate_logistic_count.rda"))
data_2020 <- read_csv(here("data", "processed", "2020_passerine_BirdNET_updated.csv"))
data_2021 <- read_csv(here("data", "processed", "2021_passerine_BirdNET.csv"))
data_all <- bind_rows(data_2020, data_2021) %>%
mutate(category = cut(x = confidence, breaks = seq(0.1, 1, 0.05))) %>%
filter(common_name %in% rate_logistic_count$common_name)
data_validation <- list.files(here("data"), pattern = "*finished.csv") %>%
map_df(~ read_csv(paste0("./data/", .)))
# species-specific threshld achieving 0.9 precision ----------------------
logistic_models <- data_validation %>%
mutate(observed = ifelse(observed == "Y", 1, 0)) %>%
group_nest(common_name, scientific_name) %>%
mutate(model = map(.x = data, .f =~ glm(observed ~ confidence,
data = .x,
family = binomial))) %>%
select(common_name, scientific_name, model)
all_probability <- data_all %>%
group_nest(common_name, scientific_name) %>%
left_join(logistic_models) %>%
mutate(probability = map2(.x = data, .y = model,
.f =~ .x %>%
mutate(probability = predict(.y,
newdata = .x,
type = "response"))))
all_threshold_table <- all_probability %>%
mutate(threshold_table = map(
.x = probability,
.f = ~ tibble(threshold = seq(0, 1, 0.001)) %>%
mutate(data_remained = map_dbl(
.x = threshold,
.f = ~ threshold2remain(.x, .y = .x) # Adjust as needed to pass the correct arguments
))
))
all_threshold_table <- all_probability %>%
mutate(threshold_table = map(
.x = probability,
.f = ~ tibble(threshold = seq(0, 1, 0.001)) %>%
mutate(data_remained = map_dbl(
threshold,
~ threshold2remain(probability = .x, threshold = .x) # Adjust based on your function's arguments
))
))
all_probability
all_threshold_table <- all_probability %>%
mutate(threshold_table = map(
.x = probability,
.f = ~ tibble(threshold = seq(0, 1, 0.001)) %>%
mutate(data_remained = map_dbl(
threshold,
~ threshold2remain(probability_data = .x, threshold = .x) # Adjust based on your function's arguments
))
))
all_probability
all_probability <- data_all %>%
group_nest(common_name, scientific_name) %>%
left_join(logistic_models) %>%
mutate(probability_data = map2(.x = data, .y = model,
.f =~ .x %>%
mutate(probability = predict(.y,
newdata = .x,
type = "response")))) %>%
select(probability_data)
all_probability
all_probability <- data_all %>%
group_nest(common_name, scientific_name) %>%
left_join(logistic_models) %>%
mutate(probability_data = map2(.x = data, .y = model,
.f =~ .x %>%
mutate(probability = predict(.y,
newdata = .x,
type = "response")))) %>%
select(-data, -model)
all_probability
all_probability$probability_data[[1]]
threshold_table <- tibble(threshold = seq(0, 1, 0.001)) %>%
mutate(data_remained = map_dbl(.x = threshold,
.f =~ threshold2remain(all_probability$probability_data[[1]], .x))) %>%
mutate(precision = map_dbl(.x = threshold,
.f =~ threshold2precision(all_probability$probability_data[[1]], .x)))
threshold_table
# function to determine the threshold given specified precision level
precision2threshold <- function(threshold_table, precision){
model <- glm(precision ~ threshold,
data = threshold_table,
family = binomial)
(log(precision/(1 - precision)) - model$coefficients[1])/model$coefficients[2]
}
threshold_table <- tibble(threshold = seq(0, 1, 0.001)) %>%
mutate(data_remained = map_dbl(.x = threshold,
.f =~ threshold2remain(all_probability$probability_data[[1]], .x))) %>%
mutate(precision = map_dbl(.x = threshold,
.f =~ threshold2precision(all_probability$probability_data[[1]], .x))) %>%
precision2threshold(precision = 0.9)
threshold_table
threshold_table <- tibble(threshold = seq(0, 1, 0.001)) %>%
mutate(data_remained = map_dbl(.x = threshold,
.f =~ threshold2remain(all_probability$probability_data[[4]], .x))) %>%
mutate(precision = map_dbl(.x = threshold,
.f =~ threshold2precision(all_probability$probability_data[[4]], .x))) %>%
precision2threshold(precision = 0.9)
threshold_table
all_probability
test <- all_probability %>%
mutate(threshold_table = tibble(threshold = seq(0, 1, 0.001)))
threshold_value <- c()
for (i in 1:nrow(all_probability)){
temp <- tibble(threshold = seq(0, 1, 0.001)) %>%
mutate(data_remained = map_dbl(.x = threshold,
.f =~ threshold2remain(all_probability$probability_data[[i]], .x))) %>%
mutate(precision = map_dbl(.x = threshold,
.f =~ threshold2precision(all_probability$probability_data[[i]], .x))) %>%
precision2threshold(precision = 0.9)
threshold_value <- c(threshold_value, temp)
}
threshold_value
all_probability %>%
mutate(threshold = threshold_value)
all_probability %>%
mutate(threshold = threshold_value) %>%
arrange(threshold)
all_probability %>%
mutate(threshold = threshold_value) %>%
arrange(threshold)
all_probability %>%
mutate(threshold = threshold_value) %>%
arrange(threshold)
# thresholds for precision = 0.9 (red), 0.95 (blue), and 0.99 (green)
t_0.9 <- precision2threshold(threshold_table, 0.9)
# thresholds for precision = 0.9 (red), 0.95 (blue), and 0.99 (green)
t_0.9 <- precision2threshold(threshold_table, 0.9)
# function to determine the threshold given specified precision level
precision2threshold <- function(threshold_table, precision){
model <- glm(precision ~ threshold,
data = threshold_table,
family = binomial)
(log(precision/(1 - precision)) - model$coefficients[1])/model$coefficients[2]
}
# read in the output from BirdNET
birdnet_output <- read_csv("birdnet_full.csv")
# select the target species and create a validation dataset
NOFL_validation <- birdnet_output %>%
filter(common_name == "Northern Flicker") %>%
mutate(class = cut(x = confidence, breaks = seq(0.1, 1, 0.05))) %>%
slice_sample(n = 10, by = class)
# edit the path as needed
NOFL_validation_finished <- read_csv("Northern_Flicker_finished.csv")
# fit logistic model using glm()
NOFL_model <- glm(observed ~ confidence,
data = NOFL_validation_finished,
family = binomial)
# find precision given a threshold
threshold2precision <- function(probability_data, threshold){
threshold <- probability_data %>%
filter(confidence > threshold) %>%
pull(probability) %>%
mean()
}
# find the data ramained given a threshold
threshold2remain <- function(probability_data, threshold){
remain <- probability_data %>%
filter(confidence > threshold) %>%
nrow()
remain/nrow(probability_data)
}
# read the full BirdNET output file
birdnet_output <- read_csv("birdnet_full.csv")
# predict probabilities for Northern Flicker data
NOFL_probability <- birdnet_output %>%
filter(common_name == "Northern Flicker") %>%
mutate(probability = predict(NOFL_model, newdata = ., type = "response"))
# create a table of thresholds with precision and data retention
threshold_table <- tibble(threshold = seq(0, 1, 0.001)) %>%
mutate(data_remained = map_dbl(.x = threshold,
.f =~ threshold2remain(NOFL_probability, .x))) %>%
mutate(precision = map_dbl(.x = threshold,
.f =~ threshold2precision(NOFL_probability, .x)))
# function to determine the threshold given specified precision level
precision2threshold <- function(threshold_table, precision){
model <- glm(precision ~ threshold,
data = threshold_table,
family = binomial)
(log(precision/(1 - precision)) - model$coefficients[1])/model$coefficients[2]
}
# thresholds for precision = 0.9 (red), 0.95 (blue), and 0.99 (green)
t_0.9 <- precision2threshold(threshold_table, 0.9)
t_0.95 <- precision2threshold(threshold_table, 0.95)
t_0.99 <- precision2threshold(threshold_table, 0.99)
# visualization of precision vs. threshold
ggplot(threshold_table, aes(x = threshold,
y = precision)) +
geom_line(stat = "smooth",
method = "glm",
se = FALSE,
method.args = list(family = binomial),
linewidth = 1.5) +
geom_vline(xintercept = t_0.9, colour = "red", linewidth = 1.5) +
geom_vline(xintercept = t_0.95, colour = "blue", linewidth = 1.5) +
geom_vline(xintercept = t_0.99, colour = "darkgreen", linewidth = 1.5) +
ylim(0, 1) +
theme_bw() +
labs(x = "Threshold",
y = "Precision")
t_0.9
