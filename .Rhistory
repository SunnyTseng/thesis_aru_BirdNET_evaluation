return(g1)
}
g1_list_1 <- rate_loess_count %>%
group_nest(common_name, scientific_name) %>%
mutate(g1 = map2(.x = data,
.y = common_name,
.f =~ g1_plot_1(data = .x, species = .y)))
level_patch <- (g1_list_1$g1[[19]] | g1_list_1$g1[[7]]) / (g1_list_1$g1[[2]] | g1_list_1$g1[[15]]) &
plot_annotation(tag_levels = 'A') &
theme(plot.margin = margin(5.5, 5.5, 5.5, 8),
plot.tag.position = c(0, 0.98)) &
ylab(NULL) &
xlab(NULL)
level_patch_1 <- patchwork::patchworkGrob(level_patch) %>%
gridExtra::grid.arrange(.,
#right = grid.text("Proportion of true positives (%)", rot = -90, gp = gpar(fontsize=18)),
left = grid.text("Remaining BirdNET detections (%)", rot = 90, gp = gpar(fontsize=18)),
bottom = grid.text("Confidence threshold", gp = gpar(fontsize=18)))
g1_plot_1 <- function(data, species){
coul <- brewer.pal(10, "Set3")
threshold <- data %>%
filter(rate_cum > 0.90) %>%
slice_min(category_dbl) %>%
pull(category_dbl)
g1 <- data %>%
pivot_longer(cols = c(TP_cum, FP_cum), names_to = "type") %>%
ggplot() +
geom_bar(aes(fill = type, y = value, x = category_dbl),
position = "stack",
stat = "identity") +
#geom_point(aes(y = rate_cum*100, x = category_dbl)) +
#geom_line(aes(y = rate_cum*100, x = category_dbl)) +
geom_segment(x = threshold, y = 30, xend = threshold, yend = 10,
colour = "red", linewidth = 1.2, size = 1,
arrow = arrow(length = unit(0.1, "inches"))) +
# geom_vline(xintercept = threshold, colour = "red", linetype = "dashed", linewidth = 1.2) +
# geom_vline(xintercept = 0.75, colour = "grey", linetype = "dashed", linewidth = 1.2) +
ggtitle(species) +
scale_fill_manual(values = coul[c(6, 1)],
labels = c("False Positive", "True Positive")) +
theme_bw() +
labs(x = "Confidence threshold",
y = "Remaining BirdNET detections (%)") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 11),
legend.position = c(0.80, 0.80),
title = element_text(size = 14))
return(g1)
}
g1_list_1 <- rate_loess_count %>%
group_nest(common_name, scientific_name) %>%
mutate(g1 = map2(.x = data,
.y = common_name,
.f =~ g1_plot_1(data = .x, species = .y)))
level_patch <- (g1_list_1$g1[[19]] | g1_list_1$g1[[7]]) / (g1_list_1$g1[[2]] | g1_list_1$g1[[15]]) &
plot_annotation(tag_levels = 'A') &
theme(plot.margin = margin(5.5, 5.5, 5.5, 8),
plot.tag.position = c(0, 0.98)) &
ylab(NULL) &
xlab(NULL)
level_patch_1 <- patchwork::patchworkGrob(level_patch) %>%
gridExtra::grid.arrange(.,
#right = grid.text("Proportion of true positives (%)", rot = -90, gp = gpar(fontsize=18)),
left = grid.text("Remaining BirdNET detections (%)", rot = 90, gp = gpar(fontsize=18)),
bottom = grid.text("Confidence threshold", gp = gpar(fontsize=18)))
g1_plot_1 <- function(data, species){
coul <- brewer.pal(10, "Set3")
threshold <- data %>%
filter(rate_cum > 0.90) %>%
slice_min(category_dbl) %>%
pull(category_dbl)
g1 <- data %>%
pivot_longer(cols = c(TP_cum, FP_cum), names_to = "type") %>%
ggplot() +
geom_bar(aes(fill = type, y = value, x = category_dbl),
position = "stack",
stat = "identity") +
#geom_point(aes(y = rate_cum*100, x = category_dbl)) +
#geom_line(aes(y = rate_cum*100, x = category_dbl)) +
geom_segment(x = threshold, y = 30, xend = threshold, yend = 10,
colour = "red", linewidth = 1.2, size = 1,
arrow = arrow(length = unit(0.1, "inches"))) +
geom_segment(x = 0.75, y = 30, xend = 0.75, yend = 10,
colour = "grey", linewidth = 1.2, size = 1,
arrow = arrow(length = unit(0.1, "inches"))) +
# geom_vline(xintercept = threshold, colour = "red", linetype = "dashed", linewidth = 1.2) +
# geom_vline(xintercept = 0.75, colour = "grey", linetype = "dashed", linewidth = 1.2) +
ggtitle(species) +
scale_fill_manual(values = coul[c(6, 1)],
labels = c("False Positive", "True Positive")) +
theme_bw() +
labs(x = "Confidence threshold",
y = "Remaining BirdNET detections (%)") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 11),
legend.position = c(0.80, 0.80),
title = element_text(size = 14))
return(g1)
}
g1_list_1 <- rate_loess_count %>%
group_nest(common_name, scientific_name) %>%
mutate(g1 = map2(.x = data,
.y = common_name,
.f =~ g1_plot_1(data = .x, species = .y)))
level_patch <- (g1_list_1$g1[[19]] | g1_list_1$g1[[7]]) / (g1_list_1$g1[[2]] | g1_list_1$g1[[15]]) &
plot_annotation(tag_levels = 'A') &
theme(plot.margin = margin(5.5, 5.5, 5.5, 8),
plot.tag.position = c(0, 0.98)) &
ylab(NULL) &
xlab(NULL)
level_patch_1 <- patchwork::patchworkGrob(level_patch) %>%
gridExtra::grid.arrange(.,
#right = grid.text("Proportion of true positives (%)", rot = -90, gp = gpar(fontsize=18)),
left = grid.text("Remaining BirdNET detections (%)", rot = 90, gp = gpar(fontsize=18)),
bottom = grid.text("Confidence threshold", gp = gpar(fontsize=18)))
g1_plot_1 <- function(data, species){
coul <- brewer.pal(10, "Set3")
threshold <- data %>%
filter(rate_cum > 0.90) %>%
slice_min(category_dbl) %>%
pull(category_dbl)
g1 <- data %>%
pivot_longer(cols = c(TP_cum, FP_cum), names_to = "type") %>%
ggplot() +
geom_bar(aes(fill = type, y = value, x = category_dbl),
position = "stack",
stat = "identity") +
#geom_point(aes(y = rate_cum*100, x = category_dbl)) +
#geom_line(aes(y = rate_cum*100, x = category_dbl)) +
geom_segment(x = threshold, y = 30, xend = threshold, yend = 10,
colour = "red", linewidth = 1.2, size = 1,
arrow = arrow(length = unit(0.1, "inches"))) +
geom_segment(x = 0.75, y = 30, xend = 0.75, yend = 10,
colour = "slateblue4", linewidth = 1.2, size = 1,
arrow = arrow(length = unit(0.1, "inches"))) +
# geom_vline(xintercept = threshold, colour = "red", linetype = "dashed", linewidth = 1.2) +
# geom_vline(xintercept = 0.75, colour = "grey", linetype = "dashed", linewidth = 1.2) +
ggtitle(species) +
scale_fill_manual(values = coul[c(6, 1)],
labels = c("False Positive", "True Positive")) +
theme_bw() +
labs(x = "Confidence threshold",
y = "Remaining BirdNET detections (%)") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 11),
legend.position = c(0.80, 0.80),
title = element_text(size = 14))
return(g1)
}
g1_list_1 <- rate_loess_count %>%
group_nest(common_name, scientific_name) %>%
mutate(g1 = map2(.x = data,
.y = common_name,
.f =~ g1_plot_1(data = .x, species = .y)))
level_patch <- (g1_list_1$g1[[19]] | g1_list_1$g1[[7]]) / (g1_list_1$g1[[2]] | g1_list_1$g1[[15]]) &
plot_annotation(tag_levels = 'A') &
theme(plot.margin = margin(5.5, 5.5, 5.5, 8),
plot.tag.position = c(0, 0.98)) &
ylab(NULL) &
xlab(NULL)
level_patch_1 <- patchwork::patchworkGrob(level_patch) %>%
gridExtra::grid.arrange(.,
#right = grid.text("Proportion of true positives (%)", rot = -90, gp = gpar(fontsize=18)),
left = grid.text("Remaining BirdNET detections (%)", rot = 90, gp = gpar(fontsize=18)),
bottom = grid.text("Confidence threshold", gp = gpar(fontsize=18)))
rate_loess_count
rate_loess_count
rate_loess_count %>% glimpse()
rate_loess_count$category_dbl
g1_plot_1 <- function(data, species){
coul <- brewer.pal(10, "Set3")
threshold <- data %>%
filter(rate_cum > 0.90) %>%
slice_min(category_dbl) %>%
pull(category_dbl)
g1 <- data %>%
pivot_longer(cols = c(TP_cum, FP_cum), names_to = "type") %>%
ggplot() +
geom_bar(aes(fill = type, y = value, x = category_dbl),
position = "stack",
stat = "identity") +
#geom_point(aes(y = rate_cum*100, x = category_dbl)) +
#geom_line(aes(y = rate_cum*100, x = category_dbl)) +
geom_segment(x = threshold, y = 30, xend = threshold, yend = 10,
colour = "red", linewidth = 1.2, size = 1,
arrow = arrow(length = unit(0.1, "inches"))) +
geom_segment(x = 0.725, y = 30, xend = 0.75, yend = 10,
colour = "slateblue4", linewidth = 1.2, size = 1,
arrow = arrow(length = unit(0.1, "inches"))) +
# geom_vline(xintercept = threshold, colour = "red", linetype = "dashed", linewidth = 1.2) +
# geom_vline(xintercept = 0.75, colour = "grey", linetype = "dashed", linewidth = 1.2) +
ggtitle(species) +
scale_fill_manual(values = coul[c(6, 1)],
labels = c("False Positive", "True Positive")) +
theme_bw() +
labs(x = "Confidence threshold",
y = "Remaining BirdNET detections (%)") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 11),
legend.position = c(0.80, 0.80),
title = element_text(size = 14))
return(g1)
}
g1_list_1 <- rate_loess_count %>%
group_nest(common_name, scientific_name) %>%
mutate(g1 = map2(.x = data,
.y = common_name,
.f =~ g1_plot_1(data = .x, species = .y)))
level_patch <- (g1_list_1$g1[[19]] | g1_list_1$g1[[7]]) / (g1_list_1$g1[[2]] | g1_list_1$g1[[15]]) &
plot_annotation(tag_levels = 'A') &
theme(plot.margin = margin(5.5, 5.5, 5.5, 8),
plot.tag.position = c(0, 0.98)) &
ylab(NULL) &
xlab(NULL)
level_patch_1 <- patchwork::patchworkGrob(level_patch) %>%
gridExtra::grid.arrange(.,
#right = grid.text("Proportion of true positives (%)", rot = -90, gp = gpar(fontsize=18)),
left = grid.text("Remaining BirdNET detections (%)", rot = 90, gp = gpar(fontsize=18)),
bottom = grid.text("Confidence threshold", gp = gpar(fontsize=18)))
g1_plot_1 <- function(data, species){
coul <- brewer.pal(10, "Set3")
threshold <- data %>%
filter(rate_cum > 0.90) %>%
slice_min(category_dbl) %>%
pull(category_dbl)
g1 <- data %>%
pivot_longer(cols = c(TP_cum, FP_cum), names_to = "type") %>%
ggplot() +
geom_bar(aes(fill = type, y = value, x = category_dbl),
position = "stack",
stat = "identity") +
#geom_point(aes(y = rate_cum*100, x = category_dbl)) +
#geom_line(aes(y = rate_cum*100, x = category_dbl)) +
geom_segment(x = threshold, y = 30, xend = threshold, yend = 10,
colour = "red", linewidth = 1.2, size = 1,
arrow = arrow(length = unit(0.1, "inches"))) +
geom_segment(x = 0.725, y = 30, xend = 0.725, yend = 10,
colour = "slateblue4", linewidth = 1.2, size = 1,
arrow = arrow(length = unit(0.1, "inches"))) +
# geom_vline(xintercept = threshold, colour = "red", linetype = "dashed", linewidth = 1.2) +
# geom_vline(xintercept = 0.75, colour = "grey", linetype = "dashed", linewidth = 1.2) +
ggtitle(species) +
scale_fill_manual(values = coul[c(6, 1)],
labels = c("False Positive", "True Positive")) +
theme_bw() +
labs(x = "Confidence threshold",
y = "Remaining BirdNET detections (%)") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 11),
legend.position = c(0.80, 0.80),
title = element_text(size = 14))
return(g1)
}
g1_list_1 <- rate_loess_count %>%
group_nest(common_name, scientific_name) %>%
mutate(g1 = map2(.x = data,
.y = common_name,
.f =~ g1_plot_1(data = .x, species = .y)))
level_patch <- (g1_list_1$g1[[19]] | g1_list_1$g1[[7]]) / (g1_list_1$g1[[2]] | g1_list_1$g1[[15]]) &
plot_annotation(tag_levels = 'A') &
theme(plot.margin = margin(5.5, 5.5, 5.5, 8),
plot.tag.position = c(0, 0.98)) &
ylab(NULL) &
xlab(NULL)
level_patch_1 <- patchwork::patchworkGrob(level_patch) %>%
gridExtra::grid.arrange(.,
#right = grid.text("Proportion of true positives (%)", rot = -90, gp = gpar(fontsize=18)),
left = grid.text("Remaining BirdNET detections (%)", rot = 90, gp = gpar(fontsize=18)),
bottom = grid.text("Confidence threshold", gp = gpar(fontsize=18)))
ggsave(plot = level_patch_1,
filename = here("docs", "figures", "threshold_setting_1.png"),
width = 24,
height = 18,
units = "cm",
dpi = 300)
ggsave(plot = level_patch_1,
filename = here("docs", "figures", "threshold_setting.png"),
width = 24,
height = 18,
units = "cm",
dpi = 300)
complexity_plot <- (duration_plot + bandwidth_plot + inflections_plot) +
#plot_annotation(tag_levels = "A") +
plot_layout(axes = "collect")
load(here("R", "complexity_metrics.rda"))
coul <- brewer.pal(12, "Paired")
coul <- colorRampPalette(coul)(19)
## For duration
duration_plot <- complexity_metrics %>%
ggplot(aes(x = reorder(common_name, bandwidth),
y = duration.x,
colour = common_name)) +
geom_boxplot(size = 1, alpha = 0.4) +
geom_jitter(colour = "slategrey", size = 1, alpha = 0.2) +
scale_colour_manual(values = coul) +
scale_y_continuous(limits = c(0, 7)) +
coord_flip() +
theme_bw() +
labs(x = NULL,
y = "Duration (s)") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 5)),
legend.position = "none",
plot.margin = margin(0, 0.3, 0, 0.3, "cm"))
## For bandwidth
bandwidth_plot <- complexity_metrics %>%
ggplot(aes(x = reorder(common_name, bandwidth),
y = bandwidth,
colour = common_name)) +
geom_boxplot(size = 1, alpha = 0.4) +
geom_jitter(colour = "slategrey", size = 1, alpha = 0.2) +
scale_colour_manual(values = coul) +
scale_y_continuous(limits = c(0, 7)) +
coord_flip() +
theme_bw() +
labs(x = NULL,
y = "Bandwidth (kHz)") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 5)),
legend.position = "none",
plot.margin = margin(0, 0.3, 0, 0.3, "cm"))
## For inflections
inflections_plot <- complexity_metrics %>%
ggplot(aes(x = reorder(common_name, bandwidth),
y = inflections,
colour = common_name)) +
geom_boxplot(size = 1, alpha = 0.4) +
geom_jitter(colour = "slategrey", size = 1, alpha = 0.2) +
scale_colour_manual(values = coul) +
scale_y_continuous(limits = c(0, 17)) +
coord_flip() +
theme_bw() +
labs(x = NULL,
y = "No. of inflections") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 5)),
legend.position = "none",
plot.margin = margin(0, 0.3, 0, 0.3, "cm"))
## combine all plots
complexity_plot <- (duration_plot + bandwidth_plot + inflections_plot) +
#plot_annotation(tag_levels = "A") +
plot_layout(axes = "collect")
complexity_plot
ggsave(plot = complexity_plot,
filename = here("docs", "figures", "complexity_plot.png"),
width = 32,
height = 22,
units = "cm",
dpi = 300)
library(tidyverse)
library(here)
library(tuneR)
library(seewave)
library(ohun)
library(warbleR)
library(soundecology)
library(RColorBrewer)
library(patchwork)
load(here("R", "complexity_metrics.rda"))
coul <- brewer.pal(12, "Paired")
coul <- colorRampPalette(coul)(19)
## For duration
duration_plot <- complexity_metrics %>%
ggplot(aes(x = reorder(common_name, bandwidth),
y = duration.x,
colour = common_name)) +
geom_boxplot(size = 1, alpha = 0.4) +
geom_jitter(colour = "slategrey", size = 1, alpha = 0.2) +
scale_colour_manual(values = coul) +
scale_y_continuous(limits = c(0, 7)) +
coord_flip() +
theme_bw() +
labs(x = NULL,
y = "Duration (s)") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 5)),
legend.position = "none",
plot.margin = margin(0, 0.3, 0, 0.3, "cm"))
## For bandwidth
bandwidth_plot <- complexity_metrics %>%
ggplot(aes(x = reorder(common_name, bandwidth),
y = bandwidth,
colour = common_name)) +
geom_boxplot(size = 1, alpha = 0.4) +
geom_jitter(colour = "slategrey", size = 1, alpha = 0.2) +
scale_colour_manual(values = coul) +
scale_y_continuous(limits = c(0, 7)) +
coord_flip() +
theme_bw() +
labs(x = NULL,
y = "Bandwidth (kHz)") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 5)),
legend.position = "none",
plot.margin = margin(0, 0.3, 0, 0.3, "cm"))
## For inflections
inflections_plot <- complexity_metrics %>%
ggplot(aes(x = reorder(common_name, bandwidth),
y = inflections,
colour = common_name)) +
geom_boxplot(size = 1, alpha = 0.4) +
geom_jitter(colour = "slategrey", size = 1, alpha = 0.2) +
scale_colour_manual(values = coul) +
scale_y_continuous(limits = c(0, 17)) +
coord_flip() +
theme_bw() +
labs(x = NULL,
y = "No. of inflections") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 5)),
legend.position = "none",
plot.margin = margin(0, 0.3, 0, 0.3, "cm"))
## combine all plots
complexity_plot <- (duration_plot + bandwidth_plot + inflections_plot) +
#plot_annotation(tag_levels = "A") +
plot_layout(axes = "collect")
complexity_metrics
library(tidyverse)
library(data.table)
library(here)
library(spatstat.utils)
library(patchwork)
library(grid)
library(RColorBrewer)
data_validation <- list.files(here("data"), pattern = "*finished.csv") %>%
map_df(~ read_csv(paste0("./data/", .)))
data_2020 <- read_csv(here("data", "processed", "2020_passerine_BirdNET_updated.csv"))
data_2021 <- read_csv(here("data", "processed", "2021_passerine_BirdNET.csv"))
data_all <- bind_rows(data_2020, data_2021) %>%
mutate(category = cut(x = confidence, breaks = seq(0.1, 1, 0.05)))
rate <- data_validation %>%
group_nest(common_name, scientific_name, category) %>%
mutate(rate = map_dbl(.x = data, .f =~ sum(.x$observed == "Y")/nrow(.x))) %>%
separate(col = category, into = c("from", "to"), sep = ",") %>%
mutate(from = str_extract(from, pattern = "[^\\(]+") %>% as.numeric(),
to = str_extract(to, pattern = "[^\\]]+") %>% as.numeric()) %>%
mutate(category_dbl = (from + to)/2) %>%
select(-data)
rate_loess <- rate %>%
group_nest(common_name) %>%
mutate(rate_loess = map(.x = data, .f =~ loess(rate ~ category_dbl, data = .x) %>%
predict() %>%
ifelse(. > 1, 1, .))) %>%
unnest(cols = c(data, rate_loess)) %>%
select(common_name, scientific_name, category_dbl, rate_loess)
rate_loess_count <- data_all %>%
count(common_name, scientific_name, category) %>%
separate(col = category, into = c("from", "to"), sep = ",") %>%
mutate(from = str_extract(from, pattern = "[^\\(]+") %>% as.numeric(),
to = str_extract(to, pattern = "[^\\]]+") %>% as.numeric()) %>%
mutate(category_dbl = (from + to)/2) %>%
left_join(rate_loess) %>%
drop_na(rate_loess) %>% # to keep only target species
mutate(TP = n * rate_loess,
FP = n * (1 - rate_loess)) %>%
group_by(common_name) %>%
mutate(TP_cum = revcumsum(TP)/sum(n)*100, # total number of true positives after applying threshold
FP_cum = revcumsum(FP)/sum(n)*100, # total number of false positives after applying threshold
rate_cum = TP_cum/(TP_cum + FP_cum))
# precision evaluation for fixed threshold --------------------------------
thresholds_table_s1 <- rate_loess_count %>%
filter(from == 0.7) %>%
mutate(proportion_detection = TP_cum + FP_cum) %>%
select(common_name, scientific_name, from, rate_cum, proportion_detection) %>%
mutate(proportion_detection = round(proportion_detection, digits = 0),
rate_cum = round(rate_cum, digits = 2)) %>%
arrange(from, desc(rate_cum), proportion_detection)
thresholds_table_s1
test <- complexity_metrics
test
test <- complexity_metrics %>%
left_join(thresholds_table_s1, by = join_by(common_name, scientific_name))
test
test <- complexity_metrics %>%
left_join(thresholds_table_s1, by = join_by(common_name, scientific_name)) %.%
ggplot() +
geom_point(aes(x = duration.x, y = rate_cum))
test <- complexity_metrics %>%
left_join(thresholds_table_s1, by = join_by(common_name, scientific_name)) %>%
ggplot() +
geom_point(aes(x = duration.x, y = rate_cum))
test
install.packages("smplot2")
library(smplot2)
test <- complexity_metrics %>%
left_join(thresholds_table_s1, by = join_by(common_name, scientific_name)) %>%
ggplot() +
geom_point(aes(x = duration.x, y = rate_cum)) +
sm_statCorr()
test
test <- complexity_metrics %>%
left_join(thresholds_table_s1, by = join_by(common_name, scientific_name)) %>%
ggplot(aes(x = duration.x, y = rate_cum)) +
geom_point() +
sm_statCorr()
test
