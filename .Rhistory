geom_jitter(colour = "slategrey", size = 1, alpha = 0.2) +
scale_colour_manual(values = coul) +
scale_y_continuous(limits = c(0, 7)) +
coord_flip() +
theme_bw() +
labs(x = NULL,
y = "Duration (s)") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.title.x = element_text(margin = margin(t = 5)),
legend.position = "none",
plot.margin = margin(0, 0.3, 0, 0.3, "cm"))
## For bandwidth
bandwidth_plot <- complexity_cor %>%
ggplot(aes(x = common_name,
y = bandwidth,
colour = common_name)) +
geom_boxplot(size = 1, alpha = 0.4) +
geom_jitter(colour = "slategrey", size = 1, alpha = 0.2) +
scale_colour_manual(values = coul) +
scale_y_continuous(limits = c(0, 7)) +
coord_flip() +
theme_bw() +
labs(x = NULL,
y = "Bandwidth (kHz)") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.title.x = element_text(margin = margin(t = 5)),
legend.position = "none",
plot.margin = margin(0, 0.3, 0, 0.3, "cm"))
## For inflections
inflections_plot <- complexity_cor %>%
ggplot(aes(x = common_name,
y = inflections,
colour = common_name)) +
geom_boxplot(size = 1, alpha = 0.4) +
geom_jitter(colour = "slategrey", size = 1, alpha = 0.2) +
scale_colour_manual(values = coul) +
scale_y_continuous(limits = c(0, 17)) +
coord_flip() +
theme_bw() +
labs(x = NULL,
y = "No. of inflections") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.title.x = element_text(margin = margin(t = 5)),
legend.position = "none",
plot.margin = margin(0, 0.3, 0, 0.3, "cm"))
complexity_plot <- (duration_plot + bandwidth_plot + inflections_plot) +
#plot_annotation(tag_levels = "A") +
plot_layout(axes = "collect")
complexity_plot
ggsave(plot = complexity_plot,
filename = here("docs", "figures", "complexity_plot.png"),
width = 32,
height = 22,
units = "cm",
dpi = 300)
ggsave(plot = complexity_plot,
filename = here("docs", "figures", "complexity_plot.png"),
width = 32,
height = 22,
units = "cm",
dpi = 300)
library(tidyverse)
library(data.table)
library(here)
library(spatstat.utils)
library(patchwork)
library(grid)
library(RColorBrewer)
g1_plot_1 <- function(data, species){
coul <- brewer.pal(10, "Set3")
## create outlier threshold if non of rate_cum is larger than 0.9
if(all(data$rate_cum < 0.90)){
threshold <- 0.975
} else {
threshold <- data %>%
filter(rate_cum > 0.90) %>%
slice_min(category_dbl) %>%
pull(category_dbl)
}
g1 <- data %>%
pivot_longer(cols = c(TP_cum, FP_cum), names_to = "type") %>%
ggplot() +
geom_bar(aes(fill = type, y = value, x = category_dbl),
position = "stack",
stat = "identity") +
#geom_point(aes(y = rate_cum*100, x = category_dbl)) +
#geom_line(aes(y = rate_cum*100, x = category_dbl)) +
geom_segment(x = threshold, y = 30, xend = threshold, yend = 10,
colour = "red", linewidth = 1.2, size = 1,
arrow = arrow(length = unit(0.1, "inches"))) +
geom_segment(x = 0.725, y = 30, xend = 0.725, yend = 10,
colour = "slateblue4", linewidth = 1.2, size = 1,
arrow = arrow(length = unit(0.1, "inches"))) +
# geom_vline(xintercept = threshold, colour = "red", linetype = "dashed", linewidth = 1.2) +
# geom_vline(xintercept = 0.75, colour = "grey", linetype = "dashed", linewidth = 1.2) +
ggtitle(species) +
scale_fill_manual(values = coul[c(6, 1)],
labels = c("False Positive", "True Positive")) +
theme_bw() +
labs(x = "Confidence threshold",
y = "Remaining BirdNET detections (%)") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 11),
legend.position = c(0.80, 0.80),
title = element_text(size = 14))
return(g1)
}
# Import data -------------------------------------------------------------
data_validation <- list.files(here("data"), pattern = "*finished.csv") %>%
map_df(~ read_csv(paste0("./data/", .)))
data_2020 <- read_csv(here("data", "processed", "2020_passerine_BirdNET_updated.csv"))
data_2021 <- read_csv(here("data", "processed", "2021_passerine_BirdNET.csv"))
data_all <- bind_rows(data_2020, data_2021) %>%
mutate(category = cut(x = confidence, breaks = seq(0.1, 1, 0.05)))
# calibration curves ------------------------------------------------------
rate_1 <- data_validation %>%
mutate(observed = ifelse(observed == "Y", 1, 0))
coul <- brewer.pal(12, "Paired")
coul <- colorRampPalette(coul)(19)
g <- ggplot(rate_1, aes(x = confidence,
y = observed,
group = common_name,
colour = common_name)) +
geom_point(size = 5,
alpha = 0.1) +
geom_line(stat = "smooth",
method = "glm",
se = FALSE,
method.args = list(family = binomial),
linewidth = 1.5,
alpha = 0.7) +
scale_colour_manual(values = coul) +
scale_x_continuous(limits = c(0.1, 1), expand = c(0, 0), breaks = seq(0.1, 1, by = 0.3)) +
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
labs(x = "BirdNET confidence",
y = "True positive rate",
colour = "Species") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
plot.margin = margin(1, 1, 1, 1, "cm")) +
guides(colour = guide_legend(ncol = 4))
ggsave(plot = g,
filename = here("docs", "figures", "calibration_curves_logistic.PNG"),
width = 24,
height = 18,
units = "cm",
dpi = 300)
ggsave(plot = g,
filename = here("docs", "figures", "calibration_curves_logistic.PNG"),
width = 22,
height = 18,
units = "cm",
dpi = 300)
g <- ggplot(rate_1, aes(x = confidence,
y = observed,
group = common_name,
colour = common_name)) +
geom_point(size = 5,
alpha = 0.1) +
geom_line(stat = "smooth",
method = "glm",
se = FALSE,
method.args = list(family = binomial),
linewidth = 1.5,
alpha = 0.7) +
scale_colour_manual(values = coul) +
scale_x_continuous(limits = c(0.1, 1), expand = c(0, 0), breaks = seq(0.1, 1, by = 0.3)) +
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
labs(x = "BirdNET confidence",
y = "True positive rate",
colour = "Species") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
plot.margin = margin(1, 1, 1, 1, "cm")) +
guides(colour = guide_legend(ncol = 4))
ggsave(plot = g,
filename = here("docs", "figures", "calibration_curves_logistic.PNG"),
width = 22,
height = 18,
units = "cm",
dpi = 300)
ggsave(plot = g,
filename = here("docs", "figures", "calibration_curves_logistic.PNG"),
width = 22,
height = 20,
units = "cm",
dpi = 300)
ggsave(plot = g,
filename = here("docs", "figures", "calibration_curves_logistic.PNG"),
width = 24,
height = 20,
units = "cm",
dpi = 300)
ggsave(plot = g,
filename = here("docs", "figures", "calibration_curves_logistic.PNG"),
width = 24,
height = 19,
units = "cm",
dpi = 300)
library(tidyverse)
library(here)
library(patchwork)
library(png)
pr <- function(data = data, n_vector = c(10, 20, 30, 40, 50)){
pr_full <- NULL
for (num_recordings in n_vector){
evaluation <- NULL
for (threshold in seq(0.125, 0.975, length.out = 18)){
data_sub <- data %>%
group_by(category) %>%
sample_n(num_recordings) %>%
ungroup()
true_positive <- (data_sub$confidence > threshold & data_sub$observed == "Y") %>% sum()
false_positive <- (data_sub$confidence > threshold & data_sub$observed == "N") %>% sum()
false_negative <- (data_sub$confidence < threshold & data_sub$observed == "Y") %>% sum()
precision <- true_positive/(false_positive + true_positive)
recall <- true_positive/(false_negative + true_positive)
evaluation <- bind_rows(evaluation, tibble(threshold, precision, recall))
}
evaluation <- evaluation %>%
mutate(num_recordings = num_recordings * 18)
pr_full <- rbind(pr_full, evaluation)
}
return(pr_full)
}
proportion <- function(data = data, n_vector = c(5, 10, 25, 50), bootstrap = 100){
set.seed(70)
data_proportion_2 <- NULL
for (num_recordings in n_vector) {
data_proportion_1 <- NULL
for (i in 1:bootstrap) {
data_proportion <- data %>%
group_by(category) %>%
sample_n(num_recordings) %>%
ungroup() %>%
group_nest(category) %>%
mutate(rate = map_dbl(.x = data, .f =~ sum(.x$observed == "Y")/nrow(.x))) %>%
separate(col = category, into = c("from", "to"), sep = ",") %>%
mutate(from = str_extract(from, pattern = "[^\\(]+") %>% as.numeric(),
to = str_extract(to, pattern = "[^\\]]+") %>% as.numeric()) %>%
mutate(category_dbl = (from + to)/2) %>%
mutate(num_recordings = num_recordings) %>%
select(num_recordings, category_dbl, rate)
data_proportion_1 <- bind_rows(data_proportion_1, data_proportion)
}
data_proportion_1_sum <- data_proportion_1 %>%
group_nest(num_recordings, category_dbl) %>%
mutate(rate_mean = map_dbl(.x = data, .f =~ .x$rate %>% mean()),
rate_low = map_dbl(.x = data, .f =~ .x$rate %>% min()),
rate_high = map_dbl(.x = data, .f =~ .x$rate %>% max()),
rate_se = map_dbl(.x = data, .f =~ sd(.x$rate)/sqrt(length(.x$rate)))) %>%
select(-data)
data_proportion_2 <- bind_rows(data_proportion_2, data_proportion_1_sum)
}
return(data_proportion_2)
}
# Import data -------------------------------------------------------------
data <- read_csv(here("data",
"number_evaluation",
"Yellow_rumped Warbler_finished.csv"))
### OSFL
data <- read_csv(here("data",
#"number_evaluation",
"2020_Olive-sided Flycatcher_finished.csv"))
pro_1 <- proportion(data = data,
n_vector = c(5, 10, 25, 50),
bootstrap = 1)
g_OSFL <- pro_1 %>%
mutate(num_recordings_f = as_factor(num_recordings)) %>%
ggplot(aes(x = category_dbl,
y = rate_mean,
colour = num_recordings_f,
group = num_recordings_f)) +
geom_point(aes(size = num_recordings),
alpha = 0.3,
shape = 20) +
geom_line(stat = "smooth",
method = "glm",
se = FALSE,
method.args = list(family = binomial),
linewidth = 1.5,
alpha = 0.5) +
# geom_line(stat = "smooth", method = "loess",
#           se = FALSE, alpha = 0.5, size = 1.5) +
scale_color_manual(values = c("#999999", "#E7B800","#FC4E07", "#00AFFB")) +
scale_size(range = c(5, 25)) +
scale_x_continuous(breaks = seq(0.1, 1, by = 0.3)) +
theme_bw() +
theme(legend.position = "none",
legend.justification = NULL,
legend.box.just = NULL,
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0))) +
labs(title = "Olive-sided Flycatcher",
x = NULL,
y = NULL,
colour = NULL,
size = NULL) +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
#legend.position = c(0.8, 0.5),
legend.justification = c("left", "top"))
g_OSFL
g_OSFL <- pro_1 %>%
mutate(num_recordings_f = as_factor(num_recordings)) %>%
ggplot(aes(x = category_dbl,
y = rate_mean,
colour = num_recordings_f,
group = num_recordings_f)) +
geom_point(aes(size = num_recordings),
alpha = 0.3,
shape = 20) +
geom_line(stat = "smooth",
method = "glm",
se = FALSE,
method.args = list(family = binomial),
linewidth = 1.5,
alpha = 0.5) +
# geom_line(stat = "smooth", method = "loess",
#           se = FALSE, alpha = 0.5, size = 1.5) +
scale_color_manual(values = c("#999999", "#E7B800","#FC4E07", "#00AFFB")) +
scale_size(range = c(5, 25)) +
scale_x_continuous(breaks = seq(0.1, 1, by = 0.3)) +
theme_bw() +
theme(legend.position = "none",
legend.justification = NULL,
legend.box.just = NULL,
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0))) +
labs(#title = "Olive-sided Flycatcher",
x = NULL,
y = NULL,
colour = NULL,
size = NULL) +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
#legend.position = c(0.8, 0.5),
legend.justification = c("left", "top"))
g_OSFL
g_OSFL <- pro_1 %>%
mutate(num_recordings_f = as_factor(num_recordings)) %>%
ggplot(aes(x = category_dbl,
y = rate_mean,
colour = num_recordings_f,
group = num_recordings_f)) +
geom_point(aes(size = num_recordings),
alpha = 0.3,
shape = 20) +
geom_line(stat = "smooth",
method = "glm",
se = FALSE,
method.args = list(family = binomial),
linewidth = 1.5,
alpha = 0.5) +
# geom_line(stat = "smooth", method = "loess",
#           se = FALSE, alpha = 0.5, size = 1.5) +
scale_color_manual(values = c("#999999", "#E7B800","#FC4E07", "#00AFFB")) +
scale_size(range = c(5, 25)) +
scale_x_continuous(breaks = seq(0.1, 1, by = 0.3)) +
theme_bw() +
theme(legend.position = "none",
legend.justification = NULL,
legend.box.just = NULL,
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0))) +
labs(#title = "Olive-sided Flycatcher",
x = NULL,
y = NULL,
colour = NULL,
size = NULL) +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
#legend.position = c(0.8, 0.5),
legend.justification = c("left", "top"))
g_OSFL
g_OSFL <- pro_1 %>%
mutate(num_recordings_f = as_factor(num_recordings)) %>%
ggplot(aes(x = category_dbl,
y = rate_mean,
colour = num_recordings_f,
group = num_recordings_f)) +
geom_point(aes(size = num_recordings),
alpha = 0.3,
shape = 20) +
geom_line(stat = "smooth",
method = "glm",
se = FALSE,
method.args = list(family = binomial),
linewidth = 1.5,
alpha = 0.5) +
# geom_line(stat = "smooth", method = "loess",
#           se = FALSE, alpha = 0.5, size = 1.5) +
scale_color_manual(values = c("white", "#E7B800","#FC4E07", "#00AFFB")) +
scale_size(range = c(5, 25)) +
scale_x_continuous(breaks = seq(0.1, 1, by = 0.3)) +
theme_bw() +
theme(legend.position = "none",
legend.justification = NULL,
legend.box.just = NULL,
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0))) +
labs(#title = "Olive-sided Flycatcher",
x = NULL,
y = NULL,
colour = NULL,
size = NULL) +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
#legend.position = c(0.8, 0.5),
legend.justification = c("left", "top"))
g_OSFL
g_OSFL <- pro_1 %>%
mutate(num_recordings_f = as_factor(num_recordings)) %>%
ggplot(aes(x = category_dbl,
y = rate_mean,
colour = num_recordings_f,
group = num_recordings_f)) +
geom_point(aes(size = num_recordings),
alpha = 0.3,
shape = 20) +
geom_line(stat = "smooth",
method = "glm",
se = FALSE,
method.args = list(family = binomial),
linewidth = 1.5,
alpha = 0.5) +
# geom_line(stat = "smooth", method = "loess",
#           se = FALSE, alpha = 0.5, size = 1.5) +
scale_color_manual(values = c("white", "white","#FC4E07", "#00AFFB")) +
scale_size(range = c(5, 25)) +
scale_x_continuous(breaks = seq(0.1, 1, by = 0.3)) +
theme_bw() +
theme(legend.position = "none",
legend.justification = NULL,
legend.box.just = NULL,
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0))) +
labs(#title = "Olive-sided Flycatcher",
x = NULL,
y = NULL,
colour = NULL,
size = NULL) +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
#legend.position = c(0.8, 0.5),
legend.justification = c("left", "top"))
g_OSFL
g_OSFL <- pro_1 %>%
mutate(num_recordings_f = as_factor(num_recordings)) %>%
ggplot(aes(x = category_dbl,
y = rate_mean,
colour = num_recordings_f,
group = num_recordings_f)) +
geom_point(aes(size = num_recordings),
alpha = 0.3,
shape = 20) +
geom_line(stat = "smooth",
method = "glm",
se = FALSE,
method.args = list(family = binomial),
linewidth = 1.5,
alpha = 0.5) +
# geom_line(stat = "smooth", method = "loess",
#           se = FALSE, alpha = 0.5, size = 1.5) +
scale_color_manual(values = c("white", "white","white", "#00AFFB")) +
scale_size(range = c(5, 25)) +
scale_x_continuous(breaks = seq(0.1, 1, by = 0.3)) +
theme_bw() +
theme(legend.position = "none",
legend.justification = NULL,
legend.box.just = NULL,
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0))) +
labs(#title = "Olive-sided Flycatcher",
x = NULL,
y = NULL,
colour = NULL,
size = NULL) +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
#legend.position = c(0.8, 0.5),
legend.justification = c("left", "top"))
g_OSFL
