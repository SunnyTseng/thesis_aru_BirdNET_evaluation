Phae.long3
Phae.long4
# measure frequency contours
dom.freq.ts <- freq_ts(X = lbh_selec_table, path = tempdir())
tempdir()
writeWave(sound, file.path(tempdir(), "sound.wav"))
# measure frequency contours
dom.freq.ts <- freq_ts(X = lbh_selec_table, path = tempdir())
lbh_selec_table
detection <- energy_detector(
files = "sound.wav",
path = tempdir(),
bp = c(0.5, 9),
threshold = 30,
smooth = 150,
hold.time = 200,
min.duration = 100
)
# plot spectrogram and envelope
label_spectro(wave = sound,
envelope = TRUE,
detection = detection,
threshold = 50,
fastdisp = TRUE)
detection
detection %>% as_tibble()
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection, path = tempdir())
?freq_ts
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection, path = tempdir(),
bp = c(0.5, 8))
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection, path = tempdir(),
bp = c(0.5, 9))
sound <- readWave(paste0("E:/Audio/", year, "_passerine", "/", site, "/", recording, ".wav"),
from = start_s - 10,
to = end_s + 10,
units = "seconds")
writeWave(sound, file.path(tempdir(), "sound.wav"))
detection <- energy_detector(
files = "sound.wav",
path = tempdir(),
bp = c(0.5, 8),
threshold = 30,
smooth = 150,
hold.time = 200,
min.duration = 100
)
detection
# plot spectrogram and envelope
label_spectro(wave = sound,
envelope = TRUE,
detection = detection,
threshold = 50,
fastdisp = TRUE)
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection,
path = tempdir(),
bp = c(0.5, 8))
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection,
path = tempdir(),
bp = c(0.5, 8),
length.out = 1)
sound
sound <- readWave(paste0("E:/Audio/", year, "_passerine", "/", site, "/", recording, ".wav"),
from = start_s - 2,
to = end_s + 2,
units = "seconds")
writeWave(sound, file.path(tempdir(), "sound.wav"))
# create the selection table for the target sound
detection <- energy_detector(
files = "sound.wav",
path = tempdir(),
bp = c(0.5, 8),
threshold = 30,
smooth = 150,
hold.time = 200,
min.duration = 100
)
# plot spectrogram and envelope
label_spectro(wave = sound,
envelope = TRUE,
detection = detection,
threshold = 50,
fastdisp = TRUE)
# plot spectrogram and envelope
label_spectro(wave = sound,
envelope = TRUE,
detection = detection,
threshold = 50,
fastdisp = TRUE)
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection,
path = tempdir(),
bp = c(0.5, 8))
sound
sound <- readWave(paste0("E:/Audio/", year, "_passerine", "/", site, "/", recording, ".wav"),
from = start_s,
to = end_s,
units = "seconds")
writeWave(sound, file.path(tempdir(), "sound.wav"))
# create the selection table for the target sound
detection <- energy_detector(
files = "sound.wav",
path = tempdir(),
bp = c(0.5, 8),
threshold = 30,
smooth = 150,
hold.time = 200,
min.duration = 100
)
# plot spectrogram and envelope
label_spectro(wave = sound,
envelope = TRUE,
detection = detection,
threshold = 50,
fastdisp = TRUE)
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection,
path = tempdir(),
bp = c(0.5, 8))
# plot spectrogram and envelope
label_spectro(wave = sound,
envelope = TRUE,
detection = detection,
threshold = 50,
fastdisp = TRUE)
dev.off()
# plot spectrogram and envelope
label_spectro(wave = sound,
envelope = TRUE,
detection = detection,
threshold = 50,
fastdisp = TRUE,
bp = c(0.5, 8))
detection
# plot spectrogram and envelope
label_spectro(wave = sound,
envelope = TRUE,
detection = detection,
threshold = 50,
fastdisp = TRUE,
bp = c(0.5, 8))
rm(list = ls())
library(tidyverse)
library(here)
library(tuneR)
library(seewave)
library(ohun)
library(warbleR)
library(soundecology)
# aci_values_target <- bird_data_target %>%
#   group_nest(common_name, scientific_name) %>%
#   mutate(aci = map(.x = data,
#                    .f =~ aci_values(data = .x, dir = "E:/Audio")))
load(here("R", "aci_values_target.rda"))
# import data
data_2020 <- read_csv(here("data", "processed", paste0(2020, "_passerine_BirdNET_updated.csv")))
data_2021 <- read_csv(here("data", "processed", paste0(2021, "_passerine_BirdNET.csv")))
bird_data <- bind_rows(data_2020, data_2021)
# prepare single species data, 50 recordings per species
target_species <- c("American Robin",
"Hammond's Flycatcher",
"Northern Waterthrush",
"Olive-sided Flycatcher",
"Orange-crowned Warbler",
"Pacific Wren",
"Red-breasted Nuthatch",
"Ruby-crowned Kinglet",
"Swainson's Thrush",
"Tennessee Warbler",
"Varied Thrush",
"Western Wood-Pewee",
"White-throated Sparrow",
"Brown Creeper",
"MacGillivray's Warbler",
"Northern Flicker",
"Pacific-slope Flycatcher",
"Wilson's Warbler",
"Yellow-rumped Warbler")
bird_data_target <- bird_data %>%
filter(common_name %in% target_species) %>%
slice_max(order_by = confidence,
n = 50,
by = common_name,
with_ties = FALSE)
set.seed(12)
### temp, locate the specific sound in the list
i <- 15
year <- bird_data_target$year[i]
site <- bird_data_target$site[i]
recording <- bird_data_target$recording[i]
start_s <- bird_data_target$start_s[i]
end_s <- bird_data_target$end_s[i]
sound <- readWave(paste0("E:/Audio/", year, "_passerine", "/", site, "/", recording, ".wav"),
from = start_s,
to = end_s,
units = "seconds")
writeWave(sound, file.path(tempdir(), "sound.wav"))
# create the selection table for the target sound
detection <- energy_detector(
files = "sound.wav",
path = tempdir(),
bp = c(0.5, 8),
threshold = 30,
smooth = 150,
hold.time = 200,
min.duration = 100
)
sound <- readWave(paste0("E:/Audio/", year, "_passerine", "/", site, "/", recording, ".wav"),
from = start_s - 2,
to = end_s + 2,
units = "seconds")
writeWave(sound, file.path(tempdir(), "sound.wav"))
# create the selection table for the target sound
detection <- energy_detector(
files = "sound.wav",
path = tempdir(),
bp = c(0.5, 8),
threshold = 30,
smooth = 150,
hold.time = 200,
min.duration = 100
)
5 - 5
# plot spectrogram and envelope
label_spectro(wave = sound,
envelope = TRUE,
detection = detection,
threshold = 50,
fastdisp = TRUE,
bp = c(0.5, 8))
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection,
path = tempdir(),
bp = c(0.5, 8))
sound
Phae.long1
?freq_ts
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection,
path = tempdir(),
bp = FALSE)
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection,
path = tempdir(),
pb = FALSE)
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection,
path = tempdir())
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection,
path = tempdir(),
pb = FALSE)
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection,
path = tempdir(),
pb = FALSE,
wl = 300)
lbh_select_table
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection,
path = tempdir(),
pb = FALSE,
wl = 300,
length.out = 30,
flim = c(1, 12))
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection,
path = tempdir(),
pb = TRUE,
wl = 300,
length.out = 30,
flim = c(1, 12))
# get number of inflections
inflections(X = dom.freq.ts)
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection,
path = tempdir(),
pb = TRUE,
wl = 300,
length.out = 30,
flim = c(1, 12))
plot(dom.freq.ts)
plot(dom.freq.ts)
plot(dom.freq.ts)
dom.freq.ts
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection,
path = tempdir(),
pb = TRUE,
wl = 300,
flim = c(1, 12))
dom.freq.ts
# get number of inflections
inflections(X = dom.freq.ts)
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection,
path = tempdir(),
pb = TRUE,
wl = 300,
length.out = 50,
flim = c(1, 12))
# get number of inflections
inflections(X = dom.freq.ts)
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection,
path = tempdir(),
pb = TRUE,
wl = 300,
length.out = 30,
flim = c(1, 12))
# get number of inflections
inflections(X = dom.freq.ts)
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection,
path = tempdir(),
pb = TRUE,
wl = 300,
length.out = 20,
flim = c(1, 12))
# get number of inflections
inflections(X = dom.freq.ts)
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection,
path = tempdir(),
pb = TRUE,
wl = 300,
length.out = 50,
flim = c(1, 12))
# get number of inflections
inflections(X = dom.freq.ts)
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection,
path = tempdir(),
pb = TRUE,
wl = 300,
length.out = 40,
flim = c(1, 12))
# get number of inflections
inflections(X = dom.freq.ts)
# measure frequency contours
dom.freq.ts <- freq_ts(X = detection,
path = tempdir(),
pb = TRUE,
wl = 300,
length.out = 30,
flim = c(1, 12))
# get number of inflections
inflections(X = dom.freq.ts)
spectro_analysis(X = detection)
spectro_analysis(X = detection, path = tempdir())
freq_range(X = detection, path = tempdir())
freq_range(X = detection, path = tempdir(), flim = c(1, 12))
detection_full <- detection %>%
as_tibble()
detection_full
# get frequency range
freq_range(X = detection, path = tempdir(), flim = c(1, 12))
# get frequency range
test <- freq_range(X = detection, path = tempdir(), flim = c(1, 12)) %>%
mutate(bandwidth = top.freq - bottom.freq)
test
# get frequency range
test <- freq_range(X = detection, path = tempdir(), flim = c(1, 12)) %>%
mutate(bandwidth = top.freq - bottom.freq) %>%
pull(bandwidth)
# get frequency range
test <- freq_range(X = detection, path = tempdir(), flim = c(1, 12)) %>%
mutate(bandwidth = top.freq - bottom.freq) %>%
pull(bandwidth)
test
# get frequency range
bandwidth <- freq_range(X = detection, path = tempdir(), flim = c(1, 12)) %>%
mutate(bandwidth = top.freq - bottom.freq) %>%
pull(bandwidth)
# get number of inflections
inflections <- freq_ts(X = detection,
path = tempdir(),
pb = TRUE,
wl = 300,
length.out = 30,
flim = c(1, 12)) %>%
inflections()
inflections
bandwidth <- freq_range(X = detection, path = tempdir(), flim = c(1, 12)) %>%
mutate(bandwidth = top.freq - bottom.freq)
bandwidth
# get number of inflections
inflections <- freq_ts(X = detection,
path = tempdir(),
pb = TRUE,
length.out = 30,
flim = c(1, 12)) %>%
inflections()
inflections
# get number of inflections
inflections <- freq_ts(X = detection,
path = tempdir(),
pb = TRUE,
wl = 300,
length.out = 30,
flim = c(1, 12)) %>%
inflections()
inflections
?freq_ts
# get number of inflections
inflections <- freq_ts(X = detection,
path = tempdir(),
pb = TRUE,
length.out = 30,
flim = c(1, 12)) %>%
inflections()
# get frequency range
bandwidth <- freq_range(X = detection,
path = tempdir(),
flim = c(1, 12)) %>%
mutate(bandwidth = top.freq - bottom.freq)
inflections
bandwidth
detection_full <- detection %>%
as_tibble() %>%
left_join(inflections, by = join_by(sound.files == sound.files))
detection_full
detection_full <- detection %>%
as_tibble() %>%
left_join(inflections, by = join_by(sound.files == sound.files, selec == selec))
detection_full
detection_full <- detection %>%
as_tibble() %>%
left_join(inflections, by = join_by(sound.files == sound.files, selec == selec),
bandwidth, by = join_by(sound.files == sound.files, selec == selec))
detection_full <- detection %>%
as_tibble() %>%
left_join(inflections, by = join_by(sound.files == sound.files, selec == selec)) %>%
left_join(bandwidth, by = join_by(sound.files == sound.files, selec == selec))
detection_full
detection_full <- detection %>%
as_tibble() %>%
left_join(inflections, by = join_by(sound.files == sound.files, selec == selec)) %>%
left_join(bandwidth, by = join_by(sound.files == sound.files, selec == selec)) %>%
select(duration.x, inflections, bandwidth)
detection_full
sound <- readWave(paste0("E:/Audio/", year, "_passerine", "/", site, "/", recording, ".wav"),
from = start_s - 3,
to = end_s + 3,
units = "seconds")
writeWave(sound, file.path(tempdir(), "sound.wav"))
# create the selection table for the target sound
detection <- energy_detector(
files = "sound.wav",
path = tempdir(),
bp = c(0.5, 8),
threshold = 30,
smooth = 150,
hold.time = 200,
min.duration = 100
)
# plot spectrogram and envelope
label_spectro(wave = sound,
envelope = TRUE,
detection = detection,
threshold = 50,
fastdisp = TRUE)
# get number of inflections
inflections <- freq_ts(X = detection,
path = tempdir(),
pb = TRUE,
length.out = 30,
flim = c(1, 12)) %>%
inflections()
# get frequency range
bandwidth <- freq_range(X = detection,
path = tempdir(),
flim = c(1, 12)) %>%
mutate(bandwidth = top.freq - bottom.freq)
detection_full <- detection %>%
as_tibble() %>%
left_join(inflections, by = join_by(sound.files == sound.files, selec == selec)) %>%
left_join(bandwidth, by = join_by(sound.files == sound.files, selec == selec)) %>%
select(duration.x, inflections, bandwidth)
detection_full
### temp, locate the specific sound in the list
i <- 36
year <- bird_data_target$year[i]
site <- bird_data_target$site[i]
recording <- bird_data_target$recording[i]
start_s <- bird_data_target$start_s[i]
end_s <- bird_data_target$end_s[i]
sound <- readWave(paste0("E:/Audio/", year, "_passerine", "/", site, "/", recording, ".wav"),
from = start_s - 3,
to = end_s + 3,
units = "seconds")
writeWave(sound, file.path(tempdir(), "sound.wav"))
# create the selection table for the target sound
detection <- energy_detector(
files = "sound.wav",
path = tempdir(),
bp = c(0.5, 8),
threshold = 30,
smooth = 150,
hold.time = 200,
min.duration = 100
)
# plot spectrogram and envelope
label_spectro(wave = sound,
envelope = TRUE,
detection = detection,
threshold = 50,
fastdisp = TRUE)
