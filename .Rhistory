by = c("common_name", "scientific_name"),
suffix = c("_u", "_s")) %>%
ungroup() %>%
left_join(n_detections, by = "common_name") %>%
relocate(n_detections, .after = scientific_name) %>%
arrange(rate_cum_s)
table_final
# combine tables ----------------------------------------------------------
table_final <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_u", "_s")) %>%
ungroup() %>%
left_join(n_detections, by = "common_name") %>%
relocate(n_detections, .after = scientific_name) %>%
arrange(desc(rate_cum_s))
table_final
# combine tables ----------------------------------------------------------
table_final <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_u", "_s")) %>%
ungroup() %>%
left_join(n_detections, by = "common_name") %>%
relocate(n_detections, .after = scientific_name) %>%
arrange(desc(rate_cum_s)) %>%
gt() %>%
tab_spanner(label = "Universal",
columns = c(from_u, rate_cum_u, proportion_detection_u)) %>%
tab_spanner(label = "Species-specific",
columns = c(from_s, rate_cum_s, proportion_detection_s))
table_final
gtsave(table_final, filename = here("docs", "tables", "thresholds_table_logistic.docx"))
table_final <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_u", "_s")) %>%
ungroup() %>%
left_join(n_detections, by = "common_name") %>%
relocate(n_detections, .after = scientific_name) %>%
arrange(desc(rate_cum_s))
save(table_final, here("R", "table_final.rda"))
save(object = table_final, here("R", "table_final.rda"))
?save?
()
?save()
save(table_final, file = here("R", "thresholds_table.rda")
fds
save(table_final, file = here("R", "table_final.rda"))
rm(list = ls())
load(here("R", "complexity_metrics_1.rda"))
load(here("R", "table_final.rda"))
complexity_cor <- complexity_metrics %>%
left_join(thresholds_table_s2, by = join_by(common_name, scientific_name)) %>%
mutate(common_name = factor(common_name, levels = rev(thresholds_table_s2$common_name)))
complexity_cor <- complexity_metrics %>%
left_join(table_final, by = join_by(common_name, scientific_name)) %>%
mutate(common_name = factor(common_name, levels = rev(table_final$common_name)))
coul <- brewer.pal(12, "Paired")
coul <- colorRampPalette(coul)(19)
## For duration
duration_plot <- complexity_cor %>%
ggplot(aes(x = common_name,
y = duration.x,
colour = common_name)) +
geom_boxplot(size = 1, alpha = 0.4) +
geom_jitter(colour = "slategrey", size = 1, alpha = 0.2) +
scale_colour_manual(values = coul) +
scale_y_continuous(limits = c(0, 7)) +
coord_flip() +
theme_bw() +
labs(x = NULL,
y = "Duration (s)") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 5)),
legend.position = "none",
plot.margin = margin(0, 0.3, 0, 0.3, "cm"))
## For bandwidth
bandwidth_plot <- complexity_cor %>%
ggplot(aes(x = common_name,
y = bandwidth,
colour = common_name)) +
geom_boxplot(size = 1, alpha = 0.4) +
geom_jitter(colour = "slategrey", size = 1, alpha = 0.2) +
scale_colour_manual(values = coul) +
scale_y_continuous(limits = c(0, 7)) +
coord_flip() +
theme_bw() +
labs(x = NULL,
y = "Bandwidth (kHz)") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 5)),
legend.position = "none",
plot.margin = margin(0, 0.3, 0, 0.3, "cm"))
## For inflections
inflections_plot <- complexity_cor %>%
ggplot(aes(x = common_name,
y = inflections,
colour = common_name)) +
geom_boxplot(size = 1, alpha = 0.4) +
geom_jitter(colour = "slategrey", size = 1, alpha = 0.2) +
scale_colour_manual(values = coul) +
scale_y_continuous(limits = c(0, 17)) +
coord_flip() +
theme_bw() +
labs(x = NULL,
y = "No. of inflections") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 5)),
legend.position = "none",
plot.margin = margin(0, 0.3, 0, 0.3, "cm"))
complexity_plot <- (duration_plot + bandwidth_plot + inflections_plot) +
#plot_annotation(tag_levels = "A") +
plot_layout(axes = "collect")
complexity_plot
# library -----------------------------------------------------------------
library(tidyverse)
library(here)
library(gt)
library(RColorBrewer)
# load data ---------------------------------------------------------------
load(here("R", "rate_loess_count.rda"))
load(here("R", "rate_logistic_count.rda"))
data_2020 <- read_csv(here("data", "processed", "2020_passerine_BirdNET_updated.csv"))
data_2021 <- read_csv(here("data", "processed", "2021_passerine_BirdNET.csv"))
data_all <- bind_rows(data_2020, data_2021) %>%
mutate(category = cut(x = confidence, breaks = seq(0.1, 1, 0.05))) %>%
filter(common_name %in% rate_logistic_count$common_name)
# universal threshold of 0.7 ---------------------------------------------
thresholds_table_s1 <- rate_logistic_count %>%
filter(from == 0.7) %>%
mutate(proportion_detection = TP_cum + FP_cum) %>%
select(common_name, scientific_name, from, rate_cum, proportion_detection) %>%
mutate(proportion_detection = round(proportion_detection, digits = 0),
rate_cum = round(rate_cum, digits = 2)) %>%
arrange(from, desc(rate_cum), proportion_detection)
# species-specific threshld achieving 0.9 precision ----------------------
thresholds_table_out <- rate_logistic_count %>%
filter(common_name %in% c("Brown Creeper", "Varied Thrush")) %>%
group_by(common_name, scientific_name) %>%
slice_max(category_dbl) %>%
mutate(proportion_detection = TP_cum + FP_cum) %>%
select(common_name, scientific_name, from, rate_cum, proportion_detection) %>%
mutate(proportion_detection = round(proportion_detection, digits = 0),
rate_cum = round(rate_cum, digits = 2))
thresholds_table_s2 <- rate_logistic_count %>%
filter(rate_cum > 0.90) %>%
group_by(common_name, scientific_name) %>%
slice_min(category_dbl) %>%
mutate(proportion_detection = TP_cum + FP_cum) %>%
select(common_name, scientific_name, from, rate_cum, proportion_detection) %>%
mutate(proportion_detection = round(proportion_detection, digits = 0),
rate_cum = round(rate_cum, digits = 2)) %>%
rbind(thresholds_table_out)
# total number of detections ----------------------------------------------
n_detections <- data_all %>%
group_by(common_name) %>%
summarise(n_detections = n())
# combine tables ----------------------------------------------------------
table_final <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_u", "_s")) %>%
ungroup() %>%
left_join(n_detections, by = "common_name") %>%
relocate(n_detections, .after = scientific_name) %>%
arrange(desc(rate_cum_s)) %>%
gt() %>%
tab_spanner(label = "Universal",
columns = c(from_u, rate_cum_u, proportion_detection_u)) %>%
tab_spanner(label = "Species-specific",
columns = c(from_s, rate_cum_s, proportion_detection_s))
table_final
gtsave(table_final, filename = here("docs", "tables", "thresholds_table_logistic.docx"))
# combine tables ----------------------------------------------------------
table_final <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_u", "_s")) %>%
ungroup() %>%
left_join(n_detections, by = "common_name") %>%
relocate(n_detections, .after = scientific_name) %>%
arrange(from_s, desc(rate_cum_s)) %>%
gt() %>%
tab_spanner(label = "Universal",
columns = c(from_u, rate_cum_u, proportion_detection_u)) %>%
tab_spanner(label = "Species-specific",
columns = c(from_s, rate_cum_s, proportion_detection_s))
table_final
gtsave(table_final, filename = here("docs", "tables", "thresholds_table_logistic.docx"))
table_final <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_u", "_s")) %>%
ungroup() %>%
left_join(n_detections, by = "common_name") %>%
relocate(n_detections, .after = scientific_name) %>%
arrange(from_s, desc(rate_cum_s)) %>%
gt() %>%
tab_spanner(label = "Universal",
columns = c(from_u, rate_cum_u, proportion_detection_u)) %>%
tab_spanner(label = "Species-specific",
columns = c(from_s, rate_cum_s, proportion_detection_s))
table_final
gtsave(table_final, filename = here("docs", "tables", "thresholds_table_logistic.docx"))
table_final <- thresholds_table_s1 %>%
left_join(thresholds_table_s2,
by = c("common_name", "scientific_name"),
suffix = c("_u", "_s")) %>%
ungroup() %>%
left_join(n_detections, by = "common_name") %>%
relocate(n_detections, .after = scientific_name) %>%
arrange(from_s, desc(rate_cum_s))
save(table_final, file = here("R", "table_final.rda")
)
load(here("R", "complexity_metrics_1.rda"))
load(here("R", "table_final.rda"))
complexity_cor <- complexity_metrics %>%
left_join(table_final, by = join_by(common_name, scientific_name)) %>%
mutate(common_name = factor(common_name, levels = rev(table_final$common_name)))
coul <- brewer.pal(12, "Paired")
coul <- colorRampPalette(coul)(19)
## For duration
duration_plot <- complexity_cor %>%
ggplot(aes(x = common_name,
y = duration.x,
colour = common_name)) +
geom_boxplot(size = 1, alpha = 0.4) +
geom_jitter(colour = "slategrey", size = 1, alpha = 0.2) +
scale_colour_manual(values = coul) +
scale_y_continuous(limits = c(0, 7)) +
coord_flip() +
theme_bw() +
labs(x = NULL,
y = "Duration (s)") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 5)),
legend.position = "none",
plot.margin = margin(0, 0.3, 0, 0.3, "cm"))
## For bandwidth
bandwidth_plot <- complexity_cor %>%
ggplot(aes(x = common_name,
y = bandwidth,
colour = common_name)) +
geom_boxplot(size = 1, alpha = 0.4) +
geom_jitter(colour = "slategrey", size = 1, alpha = 0.2) +
scale_colour_manual(values = coul) +
scale_y_continuous(limits = c(0, 7)) +
coord_flip() +
theme_bw() +
labs(x = NULL,
y = "Bandwidth (kHz)") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 5)),
legend.position = "none",
plot.margin = margin(0, 0.3, 0, 0.3, "cm"))
## For inflections
inflections_plot <- complexity_cor %>%
ggplot(aes(x = common_name,
y = inflections,
colour = common_name)) +
geom_boxplot(size = 1, alpha = 0.4) +
geom_jitter(colour = "slategrey", size = 1, alpha = 0.2) +
scale_colour_manual(values = coul) +
scale_y_continuous(limits = c(0, 17)) +
coord_flip() +
theme_bw() +
labs(x = NULL,
y = "No. of inflections") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.title.x = element_text(margin = margin(t = 5)),
legend.position = "none",
plot.margin = margin(0, 0.3, 0, 0.3, "cm"))
## combine all plots
complexity_plot <- (duration_plot + bandwidth_plot + inflections_plot) +
#plot_annotation(tag_levels = "A") +
plot_layout(axes = "collect")
complexity_plot
ggsave(plot = complexity_plot,
filename = here("docs", "figures", "complexity_plot.png"),
width = 32,
height = 22,
units = "cm",
dpi = 300)
## For duration
duration_plot <- complexity_cor %>%
ggplot(aes(x = common_name,
y = duration.x,
colour = common_name)) +
geom_boxplot(size = 1, alpha = 0.4) +
geom_jitter(colour = "slategrey", size = 1, alpha = 0.2) +
scale_colour_manual(values = coul) +
scale_y_continuous(limits = c(0, 7)) +
coord_flip() +
theme_bw() +
labs(x = NULL,
y = "Duration (s)") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.title.x = element_text(margin = margin(t = 5)),
legend.position = "none",
plot.margin = margin(0, 0.3, 0, 0.3, "cm"))
## For bandwidth
bandwidth_plot <- complexity_cor %>%
ggplot(aes(x = common_name,
y = bandwidth,
colour = common_name)) +
geom_boxplot(size = 1, alpha = 0.4) +
geom_jitter(colour = "slategrey", size = 1, alpha = 0.2) +
scale_colour_manual(values = coul) +
scale_y_continuous(limits = c(0, 7)) +
coord_flip() +
theme_bw() +
labs(x = NULL,
y = "Bandwidth (kHz)") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.title.x = element_text(margin = margin(t = 5)),
legend.position = "none",
plot.margin = margin(0, 0.3, 0, 0.3, "cm"))
## For inflections
inflections_plot <- complexity_cor %>%
ggplot(aes(x = common_name,
y = inflections,
colour = common_name)) +
geom_boxplot(size = 1, alpha = 0.4) +
geom_jitter(colour = "slategrey", size = 1, alpha = 0.2) +
scale_colour_manual(values = coul) +
scale_y_continuous(limits = c(0, 17)) +
coord_flip() +
theme_bw() +
labs(x = NULL,
y = "No. of inflections") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 16),
axis.title.x = element_text(margin = margin(t = 5)),
legend.position = "none",
plot.margin = margin(0, 0.3, 0, 0.3, "cm"))
complexity_plot <- (duration_plot + bandwidth_plot + inflections_plot) +
#plot_annotation(tag_levels = "A") +
plot_layout(axes = "collect")
complexity_plot
ggsave(plot = complexity_plot,
filename = here("docs", "figures", "complexity_plot.png"),
width = 32,
height = 22,
units = "cm",
dpi = 300)
ggsave(plot = complexity_plot,
filename = here("docs", "figures", "complexity_plot.png"),
width = 32,
height = 22,
units = "cm",
dpi = 300)
library(tidyverse)
library(data.table)
library(here)
library(spatstat.utils)
library(patchwork)
library(grid)
library(RColorBrewer)
g1_plot_1 <- function(data, species){
coul <- brewer.pal(10, "Set3")
## create outlier threshold if non of rate_cum is larger than 0.9
if(all(data$rate_cum < 0.90)){
threshold <- 0.975
} else {
threshold <- data %>%
filter(rate_cum > 0.90) %>%
slice_min(category_dbl) %>%
pull(category_dbl)
}
g1 <- data %>%
pivot_longer(cols = c(TP_cum, FP_cum), names_to = "type") %>%
ggplot() +
geom_bar(aes(fill = type, y = value, x = category_dbl),
position = "stack",
stat = "identity") +
#geom_point(aes(y = rate_cum*100, x = category_dbl)) +
#geom_line(aes(y = rate_cum*100, x = category_dbl)) +
geom_segment(x = threshold, y = 30, xend = threshold, yend = 10,
colour = "red", linewidth = 1.2, size = 1,
arrow = arrow(length = unit(0.1, "inches"))) +
geom_segment(x = 0.725, y = 30, xend = 0.725, yend = 10,
colour = "slateblue4", linewidth = 1.2, size = 1,
arrow = arrow(length = unit(0.1, "inches"))) +
# geom_vline(xintercept = threshold, colour = "red", linetype = "dashed", linewidth = 1.2) +
# geom_vline(xintercept = 0.75, colour = "grey", linetype = "dashed", linewidth = 1.2) +
ggtitle(species) +
scale_fill_manual(values = coul[c(6, 1)],
labels = c("False Positive", "True Positive")) +
theme_bw() +
labs(x = "Confidence threshold",
y = "Remaining BirdNET detections (%)") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 11),
legend.position = c(0.80, 0.80),
title = element_text(size = 14))
return(g1)
}
# Import data -------------------------------------------------------------
data_validation <- list.files(here("data"), pattern = "*finished.csv") %>%
map_df(~ read_csv(paste0("./data/", .)))
data_2020 <- read_csv(here("data", "processed", "2020_passerine_BirdNET_updated.csv"))
data_2021 <- read_csv(here("data", "processed", "2021_passerine_BirdNET.csv"))
data_all <- bind_rows(data_2020, data_2021) %>%
mutate(category = cut(x = confidence, breaks = seq(0.1, 1, 0.05)))
# calibration curves ------------------------------------------------------
rate_1 <- data_validation %>%
mutate(observed = ifelse(observed == "Y", 1, 0))
coul <- brewer.pal(12, "Paired")
coul <- colorRampPalette(coul)(19)
g <- ggplot(rate_1, aes(x = confidence,
y = observed,
group = common_name,
colour = common_name)) +
geom_point(size = 5,
alpha = 0.1) +
geom_line(stat = "smooth",
method = "glm",
se = FALSE,
method.args = list(family = binomial),
linewidth = 1.5,
alpha = 0.7) +
scale_colour_manual(values = coul) +
scale_x_continuous(limits = c(0.1, 1), expand = c(0, 0), breaks = seq(0.1, 1, by = 0.3)) +
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
labs(x = "BirdNET confidence",
y = "True positive rate",
colour = "Species") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
plot.margin = margin(1, 1, 1, 1, "cm")) +
guides(colour = guide_legend(ncol = 4))
ggsave(plot = g,
filename = here("docs", "figures", "calibration_curves_logistic.PNG"),
width = 24,
height = 18,
units = "cm",
dpi = 300)
ggsave(plot = g,
filename = here("docs", "figures", "calibration_curves_logistic.PNG"),
width = 22,
height = 18,
units = "cm",
dpi = 300)
g <- ggplot(rate_1, aes(x = confidence,
y = observed,
group = common_name,
colour = common_name)) +
geom_point(size = 5,
alpha = 0.1) +
geom_line(stat = "smooth",
method = "glm",
se = FALSE,
method.args = list(family = binomial),
linewidth = 1.5,
alpha = 0.7) +
scale_colour_manual(values = coul) +
scale_x_continuous(limits = c(0.1, 1), expand = c(0, 0), breaks = seq(0.1, 1, by = 0.3)) +
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
labs(x = "BirdNET confidence",
y = "True positive rate",
colour = "Species") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.title = element_blank(),
legend.text = element_text(size = 12),
legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),
plot.margin = margin(1, 1, 1, 1, "cm")) +
guides(colour = guide_legend(ncol = 4))
ggsave(plot = g,
filename = here("docs", "figures", "calibration_curves_logistic.PNG"),
width = 22,
height = 18,
units = "cm",
dpi = 300)
ggsave(plot = g,
filename = here("docs", "figures", "calibration_curves_logistic.PNG"),
width = 22,
height = 20,
units = "cm",
dpi = 300)
ggsave(plot = g,
filename = here("docs", "figures", "calibration_curves_logistic.PNG"),
width = 24,
height = 20,
units = "cm",
dpi = 300)
ggsave(plot = g,
filename = here("docs", "figures", "calibration_curves_logistic.PNG"),
width = 24,
height = 19,
units = "cm",
dpi = 300)
