position = "stack") +
theme_bw() +
scale_fill_manual(values = coul[c(6, 1)],
labels = c("Sampled", "Not sampled")) +
scale_x_discrete(labels = seq(0.1, 1, 0.05)) +
labs(x = "Confidence value",
y = "No. of BirdNET observations") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 11),
legend.position = c(0.80, 0.80),
title = element_text(size = 14))
simple
# simple random sampling
simple <- NOFL_full %>%
slice_sample(n = 180) %>%
mutate(sampled = "A") %>%
right_join(NOFL_full) %>%
select(id, category, confidence, sampled) %>%
mutate(sampled = if_else(is.na(sampled), "B", sampled)) %>%
ggplot() +
geom_bar(aes(fill = sampled, x = category),
position = "stack") +
theme_bw() +
scale_fill_manual(values = coul[c(6, 1)],
labels = c("Sampled", "Not sampled")) +
scale_x_discrete(labels = seq(0.1, 1, 0.05)) +
labs(x = "Confidence value",
y = "No. of BirdNET observations") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 11),
legend.position = c(0.80, 0.80),
title = element_text(size = 14))
simple
# stratified sampling
stratified <- NOFL_full %>%
slice_sample(n = 10, by = category) %>%
mutate(sampled = "A") %>%
right_join(NOFL_full) %>%
select(id, category, confidence, sampled) %>%
mutate(sampled = if_else(is.na(sampled), "B", sampled)) %>%
ggplot() +
geom_bar(aes(fill = sampled, x = category),
position = "stack") +
theme_bw() +
scale_fill_manual(values = coul[c(6, 1)],
labels = c("Sampled", "Not sampled")) +
scale_x_discrete(labels = seq(0.1, 1, 0.05)) +
labs(x = "Confidence value",
y = "No. of BirdNET observations") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 11),
legend.position = c(0.80, 0.80),
title = element_text(size = 14))
stratified
# visualization of precision vs. threshold
ggplot(threshold_table, aes(x = threshold,
y = precision)) +
geom_smooth() +
# visualization of precision vs. threshold
ggplot(threshold_table, aes(x = threshold,
y = precision)) +
geom_smooth() +
geom_vline(xintercept = t_0.9, colour = "red") +
geom_vline(xintercept = t_0.95, colour = "blue") +
geom_vline(xintercept = t_0.99, colour = "green") +
ylim(0, 1) +
theme_bw() +
labs(x = "Threshold",
y = "Precision")
knitr::opts_chunk$set(echo = TRUE)
# set up the library
library(tidyverse)
# edit the path as needed
NOFL_validation_finished <- read_csv("Northern_Flicker_finished.csv")
# fit logistic model using glm()
NOFL_model <- glm(observed ~ confidence, data = NOFL_validation_finished, family = binomial)
ggplot(NOFL_validation_finished, aes(x = confidence,
y = observed)) +
geom_point(size = 5,
alpha = 0.1) +
geom_line(stat = "smooth",
method = "glm",
se = FALSE,
method.args = list(family = binomial),
linewidth = 1.5,
alpha = 0.7) +
scale_x_continuous(limits = c(0.1, 1), expand = c(0, 0), breaks = seq(0.1, 1, by = 0.3)) +
scale_y_continuous(limits = c(0, 1)) +
theme_bw() +
labs(x = "BirdNET confidence",
y = "True positive rate")
# find precision given a threshold
threshold2precision <- function(probability_data, threshold){
threshold <- probability_data %>%
filter(confidence > threshold) %>%
pull(probability) %>%
mean()
}
# find the data ramained given a threshold
threshold2remain <- function(probability_data, threshold){
remain <- probability_data %>%
filter(confidence > threshold) %>%
nrow()
remain/nrow(probability_data)
}
# read the full BirdNET output file
birdnet_output <- read_csv("birdnet_full.csv")
# predict probabilities for Northern Flicker data
NOFL_probability <- birdnet_output %>%
filter(common_name == "Northern Flicker") %>%
mutate(probability = predict(NOFL_model, newdata = ., type = "response"))
# create a table of thresholds with precision and data retention
threshold_table <- tibble(threshold = seq(0.1, 0.95, 0.05)) %>%
mutate(data_remained = map_dbl(.x = threshold,
.f =~ threshold2remain(NOFL_probability, .x))) %>%
mutate(precision = map_dbl(.x = threshold,
.f =~ threshold2precision(NOFL_probability, .x)))
threshold_table %>% str()
# function to determine the threshold given specified precision level
precision2threshold <- function(threshold_table, precision){
model <- loess(threshold ~ precision, data = threshold_table)
predict(model, newdata = data.frame(precision = precision))
}
# precision = 0.9 (red)
t_0.9 <- precision2threshold(threshold_table, 0.9)
# precision = 0.95 (blue)
t_0.95 <- precision2threshold(threshold_table, 0.95)
# precision = 0.99 (green)
t_0.99 <- precision2threshold(threshold_table, 0.99)
# visualization of precision vs. threshold
ggplot(threshold_table, aes(x = threshold,
y = precision)) +
geom_line() +
geom_vline(xintercept = t_0.9, colour = "red") +
geom_vline(xintercept = t_0.95, colour = "blue") +
geom_vline(xintercept = t_0.99, colour = "green") +
ylim(0, 1) +
theme_bw() +
labs(x = "Threshold",
y = "Precision")
# visualization of precision vs. threshold
ggplot(threshold_table, aes(x = threshold,
y = precision)) +
geom_smooth() +
geom_vline(xintercept = t_0.9, colour = "red") +
geom_vline(xintercept = t_0.95, colour = "blue") +
geom_vline(xintercept = t_0.99, colour = "green") +
ylim(0, 1) +
theme_bw() +
labs(x = "Threshold",
y = "Precision")
# visualization of precision vs. threshold
ggplot(threshold_table, aes(x = threshold,
y = precision)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = t_0.9, colour = "red") +
geom_vline(xintercept = t_0.95, colour = "blue") +
geom_vline(xintercept = t_0.99, colour = "green") +
ylim(0, 1) +
theme_bw() +
labs(x = "Threshold",
y = "Precision")
# visualization of precision vs. threshold
ggplot(threshold_table, aes(x = threshold,
y = precision)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = t_0.9, colour = "red") +
geom_vline(xintercept = t_0.95, colour = "blue") +
geom_vline(xintercept = t_0.99, colour = "green") +
ylim(0, 1) +
theme_bw() +
labs(x = "Threshold",
y = "Precision")
wood_0.9 <- (log(.90/(1-.90))-conf.model$coefficients[1])/conf.model$coefficients[2]
wood_0.9 <- (log(.90/(1-.90)) - NOFL_model$coefficients[1])/NOFL_model$coefficients[2]
sunny_0.9 <- precision2threshold(threshold_table, 0.9)
sunny_0.9
wood_0.9
tseng_0.9 <- precision2threshold(threshold_table, 0.9)
wood_0.9 <- (log(.90/(1-.90)) - NOFL_model$coefficients[1])/NOFL_model$coefficients[2]
# visualization of precision vs. threshold
ggplot(threshold_table, aes(x = threshold,
y = precision)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = tseng_0.9, colour = "darkgreen") +
geom_vline(xintercept = wood_0.9, colour = "blue") +
ylim(0, 1) +
theme_bw() +
labs(x = "Threshold",
y = "Precision")
# predict probabilities for Northern Flicker data
NOFL_probability <- birdnet_output %>%
filter(common_name == "Northern Flicker") %>%
mutate(probability = predict(NOFL_model, newdata = ., type = "response"))
# create a table of thresholds with precision and data retention
threshold_table <- tibble(threshold = seq(0.1, 0.95, 0.01)) %>%
mutate(data_remained = map_dbl(.x = threshold,
.f =~ threshold2remain(NOFL_probability, .x))) %>%
mutate(precision = map_dbl(.x = threshold,
.f =~ threshold2precision(NOFL_probability, .x)))
# create a table of thresholds with precision and data retention
threshold_table <- tibble(threshold = seq(0.1, 0.95, 0.01)) %>%
mutate(data_remained = map_dbl(.x = threshold,
.f =~ threshold2remain(NOFL_probability, .x))) %>%
mutate(precision = map_dbl(.x = threshold,
.f =~ threshold2precision(NOFL_probability, .x)))
threshold_table %>% str()
# function to determine the threshold given specified precision level
precision2threshold <- function(threshold_table, precision){
model <- loess(threshold ~ precision, data = threshold_table)
predict(model, newdata = data.frame(precision = precision))
}
# precision = 0.9 (red)
t_0.9 <- precision2threshold(threshold_table, 0.9)
# precision = 0.95 (blue)
t_0.95 <- precision2threshold(threshold_table, 0.95)
# precision = 0.99 (green)
t_0.99 <- precision2threshold(threshold_table, 0.99)
# visualization of precision vs. threshold
ggplot(threshold_table, aes(x = threshold,
y = precision)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = t_0.9, colour = "red") +
geom_vline(xintercept = t_0.95, colour = "blue") +
geom_vline(xintercept = t_0.99, colour = "green") +
ylim(0, 1) +
theme_bw() +
labs(x = "Threshold",
y = "Precision")
# create a table of thresholds with precision and data retention
threshold_table <- tibble(threshold = seq(0.1, 0.95, 0.02)) %>%
mutate(data_remained = map_dbl(.x = threshold,
.f =~ threshold2remain(NOFL_probability, .x))) %>%
mutate(precision = map_dbl(.x = threshold,
.f =~ threshold2precision(NOFL_probability, .x)))
# create a table of thresholds with precision and data retention
threshold_table <- tibble(threshold = seq(0.1, 1, 0.02)) %>%
mutate(data_remained = map_dbl(.x = threshold,
.f =~ threshold2remain(NOFL_probability, .x))) %>%
mutate(precision = map_dbl(.x = threshold,
.f =~ threshold2precision(NOFL_probability, .x)))
threshold_table %>% str()
# function to determine the threshold given specified precision level
precision2threshold <- function(threshold_table, precision){
model <- loess(threshold ~ precision, data = threshold_table)
predict(model, newdata = data.frame(precision = precision))
}
# precision = 0.9 (red)
t_0.9 <- precision2threshold(threshold_table, 0.9)
# precision = 0.95 (blue)
t_0.95 <- precision2threshold(threshold_table, 0.95)
# precision = 0.99 (green)
t_0.99 <- precision2threshold(threshold_table, 0.99)
# visualization of precision vs. threshold
ggplot(threshold_table, aes(x = threshold,
y = precision)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = t_0.9, colour = "red") +
geom_vline(xintercept = t_0.95, colour = "blue") +
geom_vline(xintercept = t_0.99, colour = "green") +
ylim(0, 1) +
theme_bw() +
labs(x = "Threshold",
y = "Precision")
# visualization of precision vs. threshold
ggplot(threshold_table, aes(x = threshold,
y = precision)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = t_0.9, colour = "red") +
geom_vline(xintercept = t_0.95, colour = "blue") +
geom_vline(xintercept = t_0.99, colour = "green") +
ylim(0, 1) +
theme_bw() +
labs(x = "Threshold",
y = "Precision")
tseng_0.9 <- precision2threshold(threshold_table, 0.9)
wood_0.9 <- (log(.90/(1-.90)) - NOFL_model$coefficients[1])/NOFL_model$coefficients[2]
# visualization of precision vs. threshold
ggplot(threshold_table, aes(x = threshold,
y = precision)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = tseng_0.9, colour = "darkgreen") +
geom_vline(xintercept = wood_0.9, colour = "blue") +
ylim(0, 1) +
theme_bw() +
labs(x = "Threshold",
y = "Precision")
# create a table of thresholds with precision and data retention
threshold_table <- tibble(threshold = seq(0.1, 1, 0.05)) %>%
mutate(data_remained = map_dbl(.x = threshold,
.f =~ threshold2remain(NOFL_probability, .x))) %>%
mutate(precision = map_dbl(.x = threshold,
.f =~ threshold2precision(NOFL_probability, .x)))
```{r echo = FALSE}
# create a table of thresholds with precision and data retention
threshold_table <- tibble(threshold = seq(0.1, 1, 0.05)) %>%
mutate(data_remained = map_dbl(.x = threshold,
.f =~ threshold2remain(NOFL_probability, .x))) %>%
mutate(precision = map_dbl(.x = threshold,
.f =~ threshold2precision(NOFL_probability, .x)))
threshold_table %>% str()
model <- loess(threshold ~ precision, data = threshold_table)
predict(model, newdata = data.frame(precision = precision))
# function to determine the threshold given specified precision level
precision2threshold <- function(threshold_table, precision){
model <- loess(threshold ~ precision, data = threshold_table)
predict(model, newdata = data.frame(precision = precision))
}
# function to determine the threshold given specified precision level
precision2threshold <- function(threshold_table, precision){
model <- loess(threshold ~ precision, data = threshold_table)
predict(model, newdata = data.frame(precision = precision))
}
# precision = 0.9 (red)
t_0.9 <- precision2threshold(threshold_table, 0.9)
# precision = 0.95 (blue)
t_0.95 <- precision2threshold(threshold_table, 0.95)
# precision = 0.99 (green)
t_0.99 <- precision2threshold(threshold_table, 0.99)
# visualization of precision vs. threshold
ggplot(threshold_table, aes(x = threshold,
y = precision)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = t_0.9, colour = "red") +
geom_vline(xintercept = t_0.95, colour = "blue") +
geom_vline(xintercept = t_0.99, colour = "green") +
ylim(0, 1) +
theme_bw() +
labs(x = "Threshold",
y = "Precision")
# create a table of thresholds with precision and data retention
threshold_table <- tibble(threshold = seq(0.1, 1, 0.01)) %>%
mutate(data_remained = map_dbl(.x = threshold,
.f =~ threshold2remain(NOFL_probability, .x))) %>%
mutate(precision = map_dbl(.x = threshold,
.f =~ threshold2precision(NOFL_probability, .x)))
threshold_table %>% str()
# function to determine the threshold given specified precision level
precision2threshold <- function(threshold_table, precision){
model <- loess(threshold ~ precision, data = threshold_table)
predict(model, newdata = data.frame(precision = precision))
}
# precision = 0.9 (red)
t_0.9 <- precision2threshold(threshold_table, 0.9)
# precision = 0.95 (blue)
t_0.95 <- precision2threshold(threshold_table, 0.95)
# precision = 0.99 (green)
t_0.99 <- precision2threshold(threshold_table, 0.99)
# visualization of precision vs. threshold
ggplot(threshold_table, aes(x = threshold,
y = precision)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = t_0.9, colour = "red") +
geom_vline(xintercept = t_0.95, colour = "blue") +
geom_vline(xintercept = t_0.99, colour = "green") +
ylim(0, 1) +
theme_bw() +
labs(x = "Threshold",
y = "Precision")
wood_0.9 <- (log(.90/(1-.90)) - NOFL_model$coefficients[1])/NOFL_model$coefficients[2]
# visualization of precision vs. threshold
ggplot(threshold_table, aes(x = threshold,
y = precision)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = tseng_0.9, colour = "darkgreen") +
geom_vline(xintercept = wood_0.9, colour = "blue") +
ylim(0, 1) +
theme_bw() +
labs(x = "Threshold",
y = "Precision")
predictions.conf = predict(NOFL_model, list(confidence = seq(0,1,.001) ), type='r')
wood_table <- tibble(prediction.range.conf = seq(0,1,.001)) %>%
mutate(predictions.conf = predict(NOFL_model, list(confidence = prediction.range.conf), type='r'))
wood_table
ggplot(wood_table, aes(x = predictions.range.conf,
y = predictions.conf))
ggplot(wood_table, aes(x = predictions.range.conf,
y = predictions.conf)) +
geom_line()
ggplot(wood_table, aes(x = prediction.range.conf,
y = predictions.conf)) +
geom_line()
ggplot(wood_table, aes(x = prediction.range.conf,
y = predictions.conf)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = tseng_0.9, colour = "blue") +
ylim(0, 1) +
theme_bw() +
labs(x = "Confidence value",
y = "Precision")
# BirdNET team
wood_0.9 <- (log(.90/(1-.90)) - NOFL_model$coefficients[1])/NOFL_model$coefficients[2]
wood_table <- tibble(prediction.range.conf = seq(0,1,.001)) %>%
mutate(predictions.conf = predict(NOFL_model, list(confidence = prediction.range.conf), type='r'))
ggplot(wood_table, aes(x = prediction.range.conf,
y = predictions.conf)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = tseng_0.9, colour = "blue") +
ylim(0, 1) +
theme_bw() +
labs(x = "Confidence value",
y = "Precision")
ggplot(wood_table, aes(y = prediction.range.conf,
x = predictions.conf)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = tseng_0.9, colour = "blue") +
ylim(0, 1) +
theme_bw() +
labs(x = "Confidence value",
y = "Precision")
ggplot(wood_table, aes(x = prediction.range.conf,
y = predictions.conf)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = tseng_0.9, colour = "blue") +
ylim(0, 1) +
theme_bw() +
labs(x = "Confidence value",
y = "Precision")
wood_table <- tibble(prediction.range.conf = seq(0,1,.001)) %>%
mutate(predictions.conf =
predict(NOFL_model,
list(confidence = prediction.range.conf),
type='response'))
ggplot(wood_table, aes(x = prediction.range.conf,
y = predictions.conf)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = tseng_0.9, colour = "blue") +
ylim(0, 1) +
theme_bw() +
labs(x = "Confidence value",
y = "Precision")
ggplot(wood_table, aes(x = prediction.range.conf,
y = predictions.conf)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = wood_0.9, colour = "blue") +
ylim(0, 1) +
theme_bw() +
labs(x = "Confidence value",
y = "Precision")
# BirdNET team
wood_0.9 <- (log(.90/(1-.90)) - NOFL_model$coefficients[1])/NOFL_model$coefficients[2]
wood_table <- tibble(prediction.range.conf = seq(0,1,.001)) %>%
mutate(predictions.conf =
predict(NOFL_model,
list(confidence = prediction.range.conf),
type='response'))
ggplot(wood_table, aes(x = prediction.range.conf,
y = predictions.conf)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = wood_0.9, colour = "blue") +
ylim(0, 1) +
theme_bw() +
labs(x = "Confidence value",
y = "Precision")
# my method
tseng_0.9 <- precision2threshold(threshold_table, 0.9)
ggplot(threshold_table, aes(x = threshold,
y = precision)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = tseng_0.9, colour = "blue") +
ylim(0, 1) +
theme_bw() +
labs(x = "Threshold",
y = "Precision")
ggplot(threshold_table, aes(x = threshold,
y = precision)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = tseng_0.9, colour = "blue") +
ylim(0, 1) +
theme_bw() +
labs(x = "Threshold",
y = "Precision")
ggplot(wood_table, aes(x = prediction.range.conf,
y = predictions.conf)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = wood_0.9, colour = "blue") +
ylim(0, 1) +
theme_bw() +
labs(x = "Confidence value",
y = "Probability")
ggplot(wood_table, aes(x = prediction.range.conf,
y = predictions.conf)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = wood_0.9, colour = "blue") +
ylim(0, 1) +
theme_bw() +
labs(x = "Confidence value",
y = "Probability")
ggplot(wood_table, aes(x = prediction.range.conf,
y = predictions.conf)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = wood_0.9, colour = "blue") +
ylim(0, 1) +
theme_bw() +
labs(x = "Confidence value",
y = "Probability of true positive")
ggplot(wood_table, aes(x = prediction.range.conf,
y = predictions.conf)) +
geom_smooth(se = FALSE, colour = "black") +
geom_vline(xintercept = wood_0.9, colour = "blue") +
ylim(0, 1) +
theme_bw() +
labs(x = "Confidence value",
y = "Probability of true positive")
tseng_0.9
wood_0.9
